mlquantify.methods.aggregative.ThreholdOptm._ThreholdOptimization
=================================================================

.. py:module:: mlquantify.methods.aggregative.ThreholdOptm._ThreholdOptimization


Classes
-------

.. autoapisummary::

   mlquantify.methods.aggregative.ThreholdOptm._ThreholdOptimization.ThresholdOptimization


Module Contents
---------------

.. py:class:: ThresholdOptimization(learner: sklearn.base.BaseEstimator)

   Bases: :py:obj:`mlquantify.base.AggregativeQuantifier`


   Generic Class for methods that are based on adjustments
   of the decision boundary of the underlying classifier in order
   to make the ACC (base method for threshold methods) estimation
   more numerically stable. Most of its strategies involve changing
   the behavior of the denominator of the ACC equation.


   .. py:attribute:: learner


   .. py:attribute:: threshold
      :value: None



   .. py:attribute:: cc_output
      :value: None



   .. py:attribute:: tpr
      :value: None



   .. py:attribute:: fpr
      :value: None



   .. py:property:: multiclass_method
      :type: bool


      All threshold Methods are binary or non multiclass 



   .. py:method:: _fit_method(X, y)

      Abstract fit method that each quantification method must implement.

      Args:
          X (array-like): Training features.
          y (array-like): Training labels.
          learner_fitted (bool): Whether the learner is already fitted.
          cv_folds (int): Number of cross-validation folds.



   .. py:method:: _predict_method(X) -> dict

      Abstract predict method that each quantification method must implement.

      Args:
          X (array-like): Test data to generate class prevalences.

      Returns:
          dict: Dictionary with class:prevalence for each class.



   .. py:method:: best_tprfpr(thresholds: numpy.ndarray, tpr: numpy.ndarray, fpr: numpy.ndarray) -> float
      :abstractmethod:


      Abstract method for determining the best TPR and FPR to use in the equation



