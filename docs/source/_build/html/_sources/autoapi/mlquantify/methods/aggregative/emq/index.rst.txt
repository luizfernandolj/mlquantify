mlquantify.methods.aggregative.emq
==================================

.. py:module:: mlquantify.methods.aggregative.emq


Classes
-------

.. autoapisummary::

   mlquantify.methods.aggregative.emq.EMQ


Module Contents
---------------

.. py:class:: EMQ(learner: sklearn.base.BaseEstimator)

   Bases: :py:obj:`mlquantify.base.AggregativeQuantifier`


   Expectation Maximisation Quantifier. It is a method that
   ajust the priors and posteriors probabilities of a learner


   .. py:attribute:: MAX_ITER
      :value: 1000



   .. py:attribute:: EPSILON
      :value: 1e-06



   .. py:attribute:: learner


   .. py:attribute:: priors
      :value: None



   .. py:method:: _fit_method(X, y)

      Abstract fit method that each quantification method must implement.

      Args:
          X (array-like): Training features.
          y (array-like): Training labels.
          learner_fitted (bool): Whether the learner is already fitted.
          cv_folds (int): Number of cross-validation folds.



   .. py:method:: _predict_method(X) -> dict

      Abstract predict method that each quantification method must implement.

      Args:
          X (array-like): Test data to generate class prevalences.

      Returns:
          dict: Dictionary with class:prevalence for each class.



   .. py:method:: predict_proba(X, epsilon: float = EPSILON, max_iter: int = MAX_ITER) -> numpy.ndarray


   .. py:method:: EM(priors, posteriors, epsilon=EPSILON, max_iter=MAX_ITER)
      :classmethod:


      Expectaion Maximization function, it iterates several times
      and At each iteration step, both the a posteriori and the a 
      priori probabilities are reestimated sequentially for each new 
      observation and each class. The iterative procedure proceeds 
      until the convergence of the estimated probabilities.

      Args:
          priors (array-like): priors probabilites of the train.
          posteriors (array-like): posteriors probabiblities of the test.
          epsilon (float): value that helps to indify the convergence.
          max_iter (int): max number of iterations.

      Returns:
          the predicted prevalence and the ajusted posteriors.



