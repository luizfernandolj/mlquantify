mlquantify.methods.aggregative.gpac
===================================

.. py:module:: mlquantify.methods.aggregative.gpac


Classes
-------

.. autoapisummary::

   mlquantify.methods.aggregative.gpac.GPAC


Module Contents
---------------

.. py:class:: GPAC(learner: sklearn.base.BaseEstimator, train_size: float = 0.6, random_state: int = None)

   Bases: :py:obj:`mlquantify.base.AggregativeQuantifier`


   Generalized Probabilistic Adjusted Count. Like 
   GAC, it also build a system of linear equations, but 
   utilize the confidence scores from probabilistic 
   classifiers as in the PAC method.


   .. py:attribute:: learner


   .. py:attribute:: cond_prob_matrix
      :value: None



   .. py:attribute:: train_size


   .. py:attribute:: random_state


   .. py:method:: _fit_method(X, y)

      Abstract fit method that each quantification method must implement.

      Args:
          X (array-like): Training features.
          y (array-like): Training labels.
          learner_fitted (bool): Whether the learner is already fitted.
          cv_folds (int): Number of cross-validation folds.



   .. py:method:: _predict_method(X) -> dict

      Abstract predict method that each quantification method must implement.

      Args:
          X (array-like): Test data to generate class prevalences.

      Returns:
          dict: Dictionary with class:prevalence for each class.



   .. py:method:: get_cond_prob_matrix(classes: list, y_labels: numpy.ndarray, y_pred: numpy.ndarray) -> numpy.ndarray
      :classmethod:


      Estimate the matrix where entry (i,j) is the estimate of P(yi|yj)



