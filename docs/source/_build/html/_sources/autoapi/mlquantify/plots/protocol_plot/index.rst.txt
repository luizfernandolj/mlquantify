mlquantify.plots.protocol_plot
==============================

.. py:module:: mlquantify.plots.protocol_plot


Attributes
----------

.. autoapisummary::

   mlquantify.plots.protocol_plot.COLORS
   mlquantify.plots.protocol_plot.MARKERS


Functions
---------

.. autoapisummary::

   mlquantify.plots.protocol_plot.adjust_color_saturation
   mlquantify.plots.protocol_plot.protocol_boxplot
   mlquantify.plots.protocol_plot.protocol_lineplot


Module Contents
---------------

.. py:data:: COLORS
   :value: ['#FFAB91', '#FFE082', '#A5D6A7', '#4DD0E1', '#FF6F61', '#FF8C94', '#D4A5A5', '#FF677D',...


.. py:data:: MARKERS
   :value: ['o', 's', '^', 'D', 'p', '*', '+', 'x', 'H', '1', '2', '3', '4', '|', '_']


.. py:function:: adjust_color_saturation(color: str, saturation_factor: float = 5) -> str

   Adjusts the saturation of a given color.

   Parameters:
   - color (str): The original color in hexadecimal format.
   - saturation_factor (float): The factor by which to adjust the saturation. 
                                Values > 1 will increase saturation, 
                                values < 1 will decrease it. Default is 1.5.

   Returns:
   - str: The color with adjusted saturation in hexadecimal format.


.. py:function:: protocol_boxplot(table_protocol: pandas.DataFrame, x: str, y: str, methods: Optional[List[str]] = None, title: Optional[str] = None, legend: bool = True, save_path: Optional[str] = None, order: Optional[str] = None, plot_params: Optional[Dict[str, Any]] = None)

   Plots a boxplot based on the provided DataFrame and selected methods.


.. py:function:: protocol_lineplot(table_protocol: pandas.DataFrame, methods: Union[List[str], str, None], x: str, y: str, title: Optional[str] = None, legend: bool = True, save_path: Optional[str] = None, group_by: str = 'mean', pos_alpha: int = 1, plot_params: Optional[Dict[str, Any]] = None)

   Plots a line plot based on the provided DataFrame of the protocol and selected methods.


