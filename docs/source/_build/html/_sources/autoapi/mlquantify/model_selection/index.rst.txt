mlquantify.model_selection
==========================

.. py:module:: mlquantify.model_selection


Classes
-------

.. autoapisummary::

   mlquantify.model_selection.GridSearchQ


Module Contents
---------------

.. py:class:: GridSearchQ(model: mlquantify.base.Quantifier, param_grid: dict, protocol: str = 'app', n_prevs: int = None, n_repetitions: int = 1, scoring: Union[List[str], str] = 'ae', refit: bool = True, val_split: float = 0.4, n_jobs: int = 1, random_seed: int = 42, timeout: int = -1, verbose: bool = False)

   Bases: :py:obj:`mlquantify.base.Quantifier`


   Hyperparameter optimization for quantification models using grid search.

   Args:
       model (Quantifier): The base quantification model.
       param_grid (dict): Hyperparameters to search over.
       protocol (str, optional): Quantification protocol ('app' or 'npp'). Defaults to 'app'.
       n_prevs (int, optional): Number of prevalence points for APP. Defaults to None.
       n_repetitions (int, optional): Number of repetitions for NPP. Defaults to 1.
       scoring (Union[List[str], str], optional): Metric(s) for evaluation. Defaults to "mae".
       refit (bool, optional): Refit model on best parameters. Defaults to True.
       val_split (float, optional): Proportion of data for validation. Defaults to 0.4.
       n_jobs (int, optional): Number of parallel jobs. Defaults to 1.
       random_seed (int, optional): Seed for reproducibility. Defaults to 42.
       timeout (int, optional): Max time per parameter combination (seconds). Defaults to -1.
       verbose (bool, optional): Verbosity of output. Defaults to False.


   .. py:attribute:: model


   .. py:attribute:: param_grid


   .. py:attribute:: protocol


   .. py:attribute:: n_prevs


   .. py:attribute:: n_repetitions


   .. py:attribute:: refit


   .. py:attribute:: val_split


   .. py:attribute:: n_jobs


   .. py:attribute:: random_seed


   .. py:attribute:: timeout


   .. py:attribute:: verbose


   .. py:attribute:: scoring


   .. py:method:: sout(msg)

      Prints messages if verbose is True.



   .. py:method:: __get_protocol(model, sample_size)

      Get the appropriate protocol instance.

      Args:
          model (Quantifier): The quantification model.
          sample_size (int): The sample size for batch processing.

      Returns:
          object: Instance of APP or NPP protocol.



   .. py:method:: fit(X, y)

      Fit the quantifier model and perform grid search.

      Args:
          X (array-like): Training features.
          y (array-like): Training labels.

      Returns:
          self: Fitted GridSearchQ instance.



   .. py:method:: predict(X)

      Make predictions using the best found model.

      Args:
          X (array-like): Data to predict on.

      Returns:
          array-like: Predictions.



   .. py:property:: classes_

      Get the classes of the best model.

      Returns:
          array-like: The classes.



   .. py:method:: set_params(**parameters)

      Set the hyperparameters for grid search.

      Args:
          parameters (dict): Hyperparameters to set.



   .. py:method:: get_params(deep=True)

      Get the parameters of the best model.

      Args:
          deep (bool, optional): If True, will return the parameters for this estimator and contained subobjects. Defaults to True.

      Returns:
          dict: Parameters of the best model.



   .. py:method:: best_model()

      Return the best model after fitting.

      Returns:
          Quantifier: The best model.

      Raises:
          ValueError: If called before fitting.



   .. py:method:: _timeout_handler(signum, frame)

      Handle timeouts during evaluation.

      Args:
          signum (int): Signal number.
          frame (object): Current stack frame.

      Raises:
          TimeoutError: When the timeout is reached.



