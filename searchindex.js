Search.setIndex({"alltitles": {"ACC": [[47, null]], "API Reference": [[1, null]], "APP": [[44, null]], "Aggregative Quantification": [[23, null]], "Aggregative methods": [[7, "aggregative-methods"]], "AggregativeQuantifier": [[30, null]], "Artificial Prevalence protocol with general usage": [[25, null]], "Artificial Prevalence protocol with selected usage": [[26, null]], "Base parameters for any protocol": [[98, "id2"]], "Binary problems": [[13, null]], "Building a Non-Aggregative Quantifier": [[97, null]], "Building a Protocol": [[14, null]], "Building a Quantifier": [[15, null], [99, null]], "Building an Aggregative Quantifier": [[24, null]], "CC": [[48, null]], "Classify Count": [[23, "classify-count"], [27, null]], "Dependencies": [[19, "dependencies"]], "DyS": [[49, null]], "DySsyn": [[50, null]], "EMQ": [[51, null]], "Ensemble": [[66, null]], "Evaluation output parameters for \u201ctable\u201d return_type": [[98, "id3"]], "Expectation Maximisation for Quantification": [[23, "expectation-maximisation-for-quantification"], [28, null]], "Experiment Management": [[16, null]], "FM": [[52, null]], "GAC": [[53, null]], "GPAC": [[54, null]], "GridSearchQ": [[68, null]], "HDx": [[67, null]], "HDy": [[55, null]], "Implemented Mixture Models": [[23, "id18"], [94, "id5"]], "Implemented Threshold Methods": [[23, "id19"], [100, "id8"]], "Installation": [[19, "id1"]], "Installing mlquantify": [[19, null]], "Label Scheme": [[20, null]], "MAX": [[56, null]], "MS": [[57, null]], "MS2": [[58, null]], "Meta Quantification": [[93, null]], "Meta methods": [[8, "meta-methods"]], "Methods Taxonomy": [[21, null]], "Metrics and scoring: quantifing the performance of a quantifier": [[29, null]], "Mixture Models": [[23, "mixture-models"], [94, null]], "MoSS": [[81, null]], "Model Selection and Evaluation": [[22, null]], "Multiclass Problems": [[101, null]], "NPP": [[45, null]], "Non Aggregative Quantification": [[96, null]], "Non Parameters Scenarios": [[102, null]], "Non-aggregative methods": [[9, "non-aggregative-methods"]], "NonAggregativeQuantifier": [[31, null]], "Other Aggregative Quantifiers": [[23, "id17"]], "PACC": [[59, null]], "PCC": [[60, null]], "PWK": [[61, null]], "PWKCLF": [[33, null]], "Protocol": [[46, null], [98, null]], "Quantifier": [[32, null]], "Returns:": [[30, "returns"], [47, "returns"], [48, "returns"], [49, "returns"], [50, "returns"], [51, "returns"], [52, "returns"], [53, "returns"], [54, "returns"], [55, "returns"], [56, "returns"], [57, "returns"], [58, "returns"], [59, "returns"], [60, "returns"], [61, "returns"], [62, "returns"], [63, "returns"], [64, "returns"], [65, "returns"]], "SMM": [[62, null]], "SORD": [[63, null]], "T50": [[64, null]], "Threshold Methods": [[23, "threshold-methods"], [100, null]], "Tunning the hyper-parameter of a quantifier": [[95, null]], "User Guide": [[103, null]], "Using Virtual Environments": [[19, "using-virtual-environments"]], "X_method": [[65, null]], "absolute_error": [[34, null]], "adjust_threshold": [[82, null]], "compute_fpr": [[83, null]], "compute_table": [[84, null]], "compute_tpr": [[85, null]], "convert_columns_to_arrays": [[70, null]], "generate_artificial_indexes": [[71, null]], "generate_artificial_prevalences": [[72, null]], "getHist": [[86, null]], "get_measure": [[73, null]], "get_method": [[74, null]], "get_real_prev": [[75, null]], "get_scores": [[87, null]], "hellinger": [[88, null]], "kullback_leibler_divergence": [[35, null]], "load_quantifier": [[76, null]], "make_prevs": [[77, null]], "mean_absolute_error": [[36, null]], "mean_squared_error": [[37, null]], "mlquantify": [[2, null]], "mlquantify.base": [[3, null]], "mlquantify.classification.methods": [[4, null]], "mlquantify.evaluation.measures": [[5, null]], "mlquantify.evaluation.protocol": [[6, null]], "mlquantify.methods.aggregative": [[7, null]], "mlquantify.methods.meta": [[8, null]], "mlquantify.methods.non_aggregative": [[9, null]], "mlquantify.model_selection": [[10, null]], "mlquantify.utils.general": [[11, null]], "mlquantify.utils.method": [[12, null]], "normalize_prevalence": [[78, null]], "normalized_absolute_error": [[38, null]], "normalized_kullback_leibler_divergence": [[39, null]], "normalized_relative_absolute_error": [[40, null]], "parallel": [[79, null]], "probsymm": [[89, null]], "process_inputs": [[41, null]], "relative_absolute_error": [[42, null]], "round_protocol_df": [[80, null]], "set_arguments": [[69, null]], "sqEuclidean": [[90, null]], "squared_error": [[43, null]], "ternary_search": [[91, null]], "topsoe": [[92, null]]}, "docnames": ["about", "api/index", "api/mlquantify", "api/mlquantify.base", "api/mlquantify.classification.methods", "api/mlquantify.evaluation.measures", "api/mlquantify.evaluation.protocol", "api/mlquantify.methods.aggregative", "api/mlquantify.methods.meta", "api/mlquantify.methods.non_aggregative", "api/mlquantify.model_selection", "api/mlquantify.utils.general", "api/mlquantify.utils.method", "binary_problems", "building_a_protocol", "building_a_quantifier", "experiment_management", "getting_started", "index", "install", "label_scheme", "methods_taxonomy", "model_selection_evaluation", "modules/aggregative", "modules/aggregative_quantifier", "modules/app_general", "modules/app_selected", "modules/cc", "modules/emq", "modules/evaluation", "modules/generated/mlquantify.base.AggregativeQuantifier", "modules/generated/mlquantify.base.NonAggregativeQuantifier", "modules/generated/mlquantify.base.Quantifier", "modules/generated/mlquantify.classification.methods.PWKCLF", "modules/generated/mlquantify.evaluation.measures.absolute_error", "modules/generated/mlquantify.evaluation.measures.kullback_leibler_divergence", "modules/generated/mlquantify.evaluation.measures.mean_absolute_error", "modules/generated/mlquantify.evaluation.measures.mean_squared_error", "modules/generated/mlquantify.evaluation.measures.normalized_absolute_error", "modules/generated/mlquantify.evaluation.measures.normalized_kullback_leibler_divergence", "modules/generated/mlquantify.evaluation.measures.normalized_relative_absolute_error", "modules/generated/mlquantify.evaluation.measures.process_inputs", "modules/generated/mlquantify.evaluation.measures.relative_absolute_error", "modules/generated/mlquantify.evaluation.measures.squared_error", "modules/generated/mlquantify.evaluation.protocol.APP", "modules/generated/mlquantify.evaluation.protocol.NPP", "modules/generated/mlquantify.evaluation.protocol.Protocol", "modules/generated/mlquantify.methods.aggregative.ACC", "modules/generated/mlquantify.methods.aggregative.CC", "modules/generated/mlquantify.methods.aggregative.DyS", "modules/generated/mlquantify.methods.aggregative.DySsyn", "modules/generated/mlquantify.methods.aggregative.EMQ", "modules/generated/mlquantify.methods.aggregative.FM", "modules/generated/mlquantify.methods.aggregative.GAC", "modules/generated/mlquantify.methods.aggregative.GPAC", "modules/generated/mlquantify.methods.aggregative.HDy", "modules/generated/mlquantify.methods.aggregative.MAX", "modules/generated/mlquantify.methods.aggregative.MS", "modules/generated/mlquantify.methods.aggregative.MS2", "modules/generated/mlquantify.methods.aggregative.PACC", "modules/generated/mlquantify.methods.aggregative.PCC", "modules/generated/mlquantify.methods.aggregative.PWK", "modules/generated/mlquantify.methods.aggregative.SMM", "modules/generated/mlquantify.methods.aggregative.SORD", "modules/generated/mlquantify.methods.aggregative.T50", "modules/generated/mlquantify.methods.aggregative.X_method", "modules/generated/mlquantify.methods.meta.Ensemble", "modules/generated/mlquantify.methods.non_aggregative.HDx", "modules/generated/mlquantify.model_selection.GridSearchQ", "modules/generated/mlquantify.set_arguments", "modules/generated/mlquantify.utils.general.convert_columns_to_arrays", "modules/generated/mlquantify.utils.general.generate_artificial_indexes", "modules/generated/mlquantify.utils.general.generate_artificial_prevalences", "modules/generated/mlquantify.utils.general.get_measure", "modules/generated/mlquantify.utils.general.get_method", "modules/generated/mlquantify.utils.general.get_real_prev", "modules/generated/mlquantify.utils.general.load_quantifier", "modules/generated/mlquantify.utils.general.make_prevs", "modules/generated/mlquantify.utils.general.normalize_prevalence", "modules/generated/mlquantify.utils.general.parallel", "modules/generated/mlquantify.utils.general.round_protocol_df", "modules/generated/mlquantify.utils.method.MoSS", "modules/generated/mlquantify.utils.method.adjust_threshold", "modules/generated/mlquantify.utils.method.compute_fpr", "modules/generated/mlquantify.utils.method.compute_table", "modules/generated/mlquantify.utils.method.compute_tpr", "modules/generated/mlquantify.utils.method.getHist", "modules/generated/mlquantify.utils.method.get_scores", "modules/generated/mlquantify.utils.method.hellinger", "modules/generated/mlquantify.utils.method.probsymm", "modules/generated/mlquantify.utils.method.sqEuclidean", "modules/generated/mlquantify.utils.method.ternary_search", "modules/generated/mlquantify.utils.method.topsoe", "modules/meta", "modules/mixture_models", "modules/model_selection", "modules/non_aggregative", "modules/non_aggregative_quantifier", "modules/protocol", "modules/quantifier", "modules/threshold_methods", "multiclass_problems", "non_parameters_scenarios", "user_guide"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxext.opengraph": 1}, "filenames": ["about.rst", "api/index.rst", "api/mlquantify.rst", "api/mlquantify.base.rst", "api/mlquantify.classification.methods.rst", "api/mlquantify.evaluation.measures.rst", "api/mlquantify.evaluation.protocol.rst", "api/mlquantify.methods.aggregative.rst", "api/mlquantify.methods.meta.rst", "api/mlquantify.methods.non_aggregative.rst", "api/mlquantify.model_selection.rst", "api/mlquantify.utils.general.rst", "api/mlquantify.utils.method.rst", "binary_problems.rst", "building_a_protocol.rst", "building_a_quantifier.rst", "experiment_management.rst", "getting_started.rst", "index.rst", "install.rst", "label_scheme.rst", "methods_taxonomy.rst", "model_selection_evaluation.rst", "modules/aggregative.rst", "modules/aggregative_quantifier.rst", "modules/app_general.rst", "modules/app_selected.rst", "modules/cc.rst", "modules/emq.rst", "modules/evaluation.rst", "modules/generated/mlquantify.base.AggregativeQuantifier.rst", "modules/generated/mlquantify.base.NonAggregativeQuantifier.rst", "modules/generated/mlquantify.base.Quantifier.rst", "modules/generated/mlquantify.classification.methods.PWKCLF.rst", "modules/generated/mlquantify.evaluation.measures.absolute_error.rst", "modules/generated/mlquantify.evaluation.measures.kullback_leibler_divergence.rst", "modules/generated/mlquantify.evaluation.measures.mean_absolute_error.rst", "modules/generated/mlquantify.evaluation.measures.mean_squared_error.rst", "modules/generated/mlquantify.evaluation.measures.normalized_absolute_error.rst", "modules/generated/mlquantify.evaluation.measures.normalized_kullback_leibler_divergence.rst", "modules/generated/mlquantify.evaluation.measures.normalized_relative_absolute_error.rst", "modules/generated/mlquantify.evaluation.measures.process_inputs.rst", "modules/generated/mlquantify.evaluation.measures.relative_absolute_error.rst", "modules/generated/mlquantify.evaluation.measures.squared_error.rst", "modules/generated/mlquantify.evaluation.protocol.APP.rst", "modules/generated/mlquantify.evaluation.protocol.NPP.rst", "modules/generated/mlquantify.evaluation.protocol.Protocol.rst", "modules/generated/mlquantify.methods.aggregative.ACC.rst", "modules/generated/mlquantify.methods.aggregative.CC.rst", "modules/generated/mlquantify.methods.aggregative.DyS.rst", "modules/generated/mlquantify.methods.aggregative.DySsyn.rst", "modules/generated/mlquantify.methods.aggregative.EMQ.rst", "modules/generated/mlquantify.methods.aggregative.FM.rst", "modules/generated/mlquantify.methods.aggregative.GAC.rst", "modules/generated/mlquantify.methods.aggregative.GPAC.rst", "modules/generated/mlquantify.methods.aggregative.HDy.rst", "modules/generated/mlquantify.methods.aggregative.MAX.rst", "modules/generated/mlquantify.methods.aggregative.MS.rst", "modules/generated/mlquantify.methods.aggregative.MS2.rst", "modules/generated/mlquantify.methods.aggregative.PACC.rst", "modules/generated/mlquantify.methods.aggregative.PCC.rst", "modules/generated/mlquantify.methods.aggregative.PWK.rst", "modules/generated/mlquantify.methods.aggregative.SMM.rst", "modules/generated/mlquantify.methods.aggregative.SORD.rst", "modules/generated/mlquantify.methods.aggregative.T50.rst", "modules/generated/mlquantify.methods.aggregative.X_method.rst", "modules/generated/mlquantify.methods.meta.Ensemble.rst", "modules/generated/mlquantify.methods.non_aggregative.HDx.rst", "modules/generated/mlquantify.model_selection.GridSearchQ.rst", "modules/generated/mlquantify.set_arguments.rst", "modules/generated/mlquantify.utils.general.convert_columns_to_arrays.rst", "modules/generated/mlquantify.utils.general.generate_artificial_indexes.rst", "modules/generated/mlquantify.utils.general.generate_artificial_prevalences.rst", "modules/generated/mlquantify.utils.general.get_measure.rst", "modules/generated/mlquantify.utils.general.get_method.rst", "modules/generated/mlquantify.utils.general.get_real_prev.rst", "modules/generated/mlquantify.utils.general.load_quantifier.rst", "modules/generated/mlquantify.utils.general.make_prevs.rst", "modules/generated/mlquantify.utils.general.normalize_prevalence.rst", "modules/generated/mlquantify.utils.general.parallel.rst", "modules/generated/mlquantify.utils.general.round_protocol_df.rst", "modules/generated/mlquantify.utils.method.MoSS.rst", "modules/generated/mlquantify.utils.method.adjust_threshold.rst", "modules/generated/mlquantify.utils.method.compute_fpr.rst", "modules/generated/mlquantify.utils.method.compute_table.rst", "modules/generated/mlquantify.utils.method.compute_tpr.rst", "modules/generated/mlquantify.utils.method.getHist.rst", "modules/generated/mlquantify.utils.method.get_scores.rst", "modules/generated/mlquantify.utils.method.hellinger.rst", "modules/generated/mlquantify.utils.method.probsymm.rst", "modules/generated/mlquantify.utils.method.sqEuclidean.rst", "modules/generated/mlquantify.utils.method.ternary_search.rst", "modules/generated/mlquantify.utils.method.topsoe.rst", "modules/meta.rst", "modules/mixture_models.rst", "modules/model_selection.rst", "modules/non_aggregative.rst", "modules/non_aggregative_quantifier.rst", "modules/protocol.rst", "modules/quantifier.rst", "modules/threshold_methods.rst", "multiclass_problems.rst", "non_parameters_scenarios.rst", "user_guide.rst"], "indexentries": {"absolute_error() (in module mlquantify.evaluation.measures)": [[34, "mlquantify.evaluation.measures.absolute_error", false]], "acc (class in mlquantify.methods.aggregative)": [[47, "mlquantify.methods.aggregative.ACC", false]], "adjust_threshold() (in module mlquantify.utils.method)": [[82, "mlquantify.utils.method.adjust_threshold", false]], "aggregativequantifier (class in mlquantify.base)": [[30, "mlquantify.base.AggregativeQuantifier", false]], "app (class in mlquantify.evaluation.protocol)": [[44, "mlquantify.evaluation.protocol.APP", false]], "best_distance() (mlquantify.methods.aggregative.dys method)": [[49, "mlquantify.methods.aggregative.DyS.best_distance", false]], "best_distance() (mlquantify.methods.aggregative.dyssyn method)": [[50, "mlquantify.methods.aggregative.DySsyn.best_distance", false]], "best_distance() (mlquantify.methods.aggregative.hdy method)": [[55, "mlquantify.methods.aggregative.HDy.best_distance", false]], "best_model() (mlquantify.model_selection.gridsearchq method)": [[68, "mlquantify.model_selection.GridSearchQ.best_model", false]], "best_tprfpr() (mlquantify.methods.aggregative.acc method)": [[47, "mlquantify.methods.aggregative.ACC.best_tprfpr", false]], "best_tprfpr() (mlquantify.methods.aggregative.max method)": [[56, "mlquantify.methods.aggregative.MAX.best_tprfpr", false]], "best_tprfpr() (mlquantify.methods.aggregative.ms method)": [[57, "mlquantify.methods.aggregative.MS.best_tprfpr", false]], "best_tprfpr() (mlquantify.methods.aggregative.ms2 method)": [[58, "mlquantify.methods.aggregative.MS2.best_tprfpr", false]], "best_tprfpr() (mlquantify.methods.aggregative.t50 method)": [[64, "mlquantify.methods.aggregative.T50.best_tprfpr", false]], "best_tprfpr() (mlquantify.methods.aggregative.x_method method)": [[65, "mlquantify.methods.aggregative.X_method.best_tprfpr", false]], "cc (class in mlquantify.methods.aggregative)": [[48, "mlquantify.methods.aggregative.CC", false]], "classes_ (mlquantify.model_selection.gridsearchq property)": [[68, "mlquantify.model_selection.GridSearchQ.classes_", false]], "compute_fpr() (in module mlquantify.utils.method)": [[83, "mlquantify.utils.method.compute_fpr", false]], "compute_table() (in module mlquantify.utils.method)": [[84, "mlquantify.utils.method.compute_table", false]], "compute_tpr() (in module mlquantify.utils.method)": [[85, "mlquantify.utils.method.compute_tpr", false]], "convert_columns_to_arrays() (in module mlquantify.utils.general)": [[70, "mlquantify.utils.general.convert_columns_to_arrays", false]], "delayed_fit() (mlquantify.base.aggregativequantifier method)": [[30, "mlquantify.base.AggregativeQuantifier.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.acc method)": [[47, "mlquantify.methods.aggregative.ACC.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.cc method)": [[48, "mlquantify.methods.aggregative.CC.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.dys method)": [[49, "mlquantify.methods.aggregative.DyS.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.dyssyn method)": [[50, "mlquantify.methods.aggregative.DySsyn.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.emq method)": [[51, "mlquantify.methods.aggregative.EMQ.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.fm method)": [[52, "mlquantify.methods.aggregative.FM.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.gac method)": [[53, "mlquantify.methods.aggregative.GAC.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.gpac method)": [[54, "mlquantify.methods.aggregative.GPAC.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.hdy method)": [[55, "mlquantify.methods.aggregative.HDy.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.max method)": [[56, "mlquantify.methods.aggregative.MAX.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.ms method)": [[57, "mlquantify.methods.aggregative.MS.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.ms2 method)": [[58, "mlquantify.methods.aggregative.MS2.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.pacc method)": [[59, "mlquantify.methods.aggregative.PACC.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.pcc method)": [[60, "mlquantify.methods.aggregative.PCC.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.pwk method)": [[61, "mlquantify.methods.aggregative.PWK.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.smm method)": [[62, "mlquantify.methods.aggregative.SMM.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.sord method)": [[63, "mlquantify.methods.aggregative.SORD.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.t50 method)": [[64, "mlquantify.methods.aggregative.T50.delayed_fit", false]], "delayed_fit() (mlquantify.methods.aggregative.x_method method)": [[65, "mlquantify.methods.aggregative.X_method.delayed_fit", false]], "delayed_predict() (mlquantify.base.aggregativequantifier method)": [[30, "mlquantify.base.AggregativeQuantifier.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.acc method)": [[47, "mlquantify.methods.aggregative.ACC.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.cc method)": [[48, "mlquantify.methods.aggregative.CC.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.dys method)": [[49, "mlquantify.methods.aggregative.DyS.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.dyssyn method)": [[50, "mlquantify.methods.aggregative.DySsyn.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.emq method)": [[51, "mlquantify.methods.aggregative.EMQ.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.fm method)": [[52, "mlquantify.methods.aggregative.FM.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.gac method)": [[53, "mlquantify.methods.aggregative.GAC.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.gpac method)": [[54, "mlquantify.methods.aggregative.GPAC.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.hdy method)": [[55, "mlquantify.methods.aggregative.HDy.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.max method)": [[56, "mlquantify.methods.aggregative.MAX.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.ms method)": [[57, "mlquantify.methods.aggregative.MS.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.ms2 method)": [[58, "mlquantify.methods.aggregative.MS2.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.pacc method)": [[59, "mlquantify.methods.aggregative.PACC.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.pcc method)": [[60, "mlquantify.methods.aggregative.PCC.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.pwk method)": [[61, "mlquantify.methods.aggregative.PWK.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.smm method)": [[62, "mlquantify.methods.aggregative.SMM.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.sord method)": [[63, "mlquantify.methods.aggregative.SORD.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.t50 method)": [[64, "mlquantify.methods.aggregative.T50.delayed_predict", false]], "delayed_predict() (mlquantify.methods.aggregative.x_method method)": [[65, "mlquantify.methods.aggregative.X_method.delayed_predict", false]], "ds_get_posteriors() (mlquantify.methods.meta.ensemble method)": [[66, "mlquantify.methods.meta.Ensemble.ds_get_posteriors", false]], "ds_selection_metric() (mlquantify.methods.meta.ensemble method)": [[66, "mlquantify.methods.meta.Ensemble.ds_selection_metric", false]], "dys (class in mlquantify.methods.aggregative)": [[49, "mlquantify.methods.aggregative.DyS", false]], "dyssyn (class in mlquantify.methods.aggregative)": [[50, "mlquantify.methods.aggregative.DySsyn", false]], "em() (mlquantify.methods.aggregative.emq class method)": [[51, "mlquantify.methods.aggregative.EMQ.EM", false]], "emq (class in mlquantify.methods.aggregative)": [[51, "mlquantify.methods.aggregative.EMQ", false]], "ensemble (class in mlquantify.methods.meta)": [[66, "mlquantify.methods.meta.Ensemble", false]], "fit() (mlquantify.base.aggregativequantifier method)": [[30, "mlquantify.base.AggregativeQuantifier.fit", false]], "fit() (mlquantify.base.nonaggregativequantifier method)": [[31, "mlquantify.base.NonAggregativeQuantifier.fit", false]], "fit() (mlquantify.classification.methods.pwkclf method)": [[33, "mlquantify.classification.methods.PWKCLF.fit", false]], "fit() (mlquantify.evaluation.protocol.app method)": [[44, "mlquantify.evaluation.protocol.APP.fit", false]], "fit() (mlquantify.evaluation.protocol.npp method)": [[45, "mlquantify.evaluation.protocol.NPP.fit", false]], "fit() (mlquantify.evaluation.protocol.protocol method)": [[46, "mlquantify.evaluation.protocol.Protocol.fit", false]], "fit() (mlquantify.methods.aggregative.acc method)": [[47, "mlquantify.methods.aggregative.ACC.fit", false]], "fit() (mlquantify.methods.aggregative.cc method)": [[48, "mlquantify.methods.aggregative.CC.fit", false]], "fit() (mlquantify.methods.aggregative.dys method)": [[49, "mlquantify.methods.aggregative.DyS.fit", false]], "fit() (mlquantify.methods.aggregative.dyssyn method)": [[50, "mlquantify.methods.aggregative.DySsyn.fit", false]], "fit() (mlquantify.methods.aggregative.emq method)": [[51, "mlquantify.methods.aggregative.EMQ.fit", false]], "fit() (mlquantify.methods.aggregative.fm method)": [[52, "mlquantify.methods.aggregative.FM.fit", false]], "fit() (mlquantify.methods.aggregative.gac method)": [[53, "mlquantify.methods.aggregative.GAC.fit", false]], "fit() (mlquantify.methods.aggregative.gpac method)": [[54, "mlquantify.methods.aggregative.GPAC.fit", false]], "fit() (mlquantify.methods.aggregative.hdy method)": [[55, "mlquantify.methods.aggregative.HDy.fit", false]], "fit() (mlquantify.methods.aggregative.max method)": [[56, "mlquantify.methods.aggregative.MAX.fit", false]], "fit() (mlquantify.methods.aggregative.ms method)": [[57, "mlquantify.methods.aggregative.MS.fit", false]], "fit() (mlquantify.methods.aggregative.ms2 method)": [[58, "mlquantify.methods.aggregative.MS2.fit", false]], "fit() (mlquantify.methods.aggregative.pacc method)": [[59, "mlquantify.methods.aggregative.PACC.fit", false]], "fit() (mlquantify.methods.aggregative.pcc method)": [[60, "mlquantify.methods.aggregative.PCC.fit", false]], "fit() (mlquantify.methods.aggregative.pwk method)": [[61, "mlquantify.methods.aggregative.PWK.fit", false]], "fit() (mlquantify.methods.aggregative.smm method)": [[62, "mlquantify.methods.aggregative.SMM.fit", false]], "fit() (mlquantify.methods.aggregative.sord method)": [[63, "mlquantify.methods.aggregative.SORD.fit", false]], "fit() (mlquantify.methods.aggregative.t50 method)": [[64, "mlquantify.methods.aggregative.T50.fit", false]], "fit() (mlquantify.methods.aggregative.x_method method)": [[65, "mlquantify.methods.aggregative.X_method.fit", false]], "fit() (mlquantify.methods.meta.ensemble method)": [[66, "mlquantify.methods.meta.Ensemble.fit", false]], "fit() (mlquantify.methods.non_aggregative.hdx method)": [[67, "mlquantify.methods.non_aggregative.HDx.fit", false]], "fit() (mlquantify.model_selection.gridsearchq method)": [[68, "mlquantify.model_selection.GridSearchQ.fit", false]], "fit_learner() (mlquantify.base.aggregativequantifier method)": [[30, "mlquantify.base.AggregativeQuantifier.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.acc method)": [[47, "mlquantify.methods.aggregative.ACC.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.cc method)": [[48, "mlquantify.methods.aggregative.CC.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.dys method)": [[49, "mlquantify.methods.aggregative.DyS.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.dyssyn method)": [[50, "mlquantify.methods.aggregative.DySsyn.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.emq method)": [[51, "mlquantify.methods.aggregative.EMQ.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.fm method)": [[52, "mlquantify.methods.aggregative.FM.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.gac method)": [[53, "mlquantify.methods.aggregative.GAC.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.gpac method)": [[54, "mlquantify.methods.aggregative.GPAC.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.hdy method)": [[55, "mlquantify.methods.aggregative.HDy.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.max method)": [[56, "mlquantify.methods.aggregative.MAX.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.ms method)": [[57, "mlquantify.methods.aggregative.MS.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.ms2 method)": [[58, "mlquantify.methods.aggregative.MS2.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.pacc method)": [[59, "mlquantify.methods.aggregative.PACC.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.pcc method)": [[60, "mlquantify.methods.aggregative.PCC.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.pwk method)": [[61, "mlquantify.methods.aggregative.PWK.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.smm method)": [[62, "mlquantify.methods.aggregative.SMM.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.sord method)": [[63, "mlquantify.methods.aggregative.SORD.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.t50 method)": [[64, "mlquantify.methods.aggregative.T50.fit_learner", false]], "fit_learner() (mlquantify.methods.aggregative.x_method method)": [[65, "mlquantify.methods.aggregative.X_method.fit_learner", false]], "fm (class in mlquantify.methods.aggregative)": [[52, "mlquantify.methods.aggregative.FM", false]], "gac (class in mlquantify.methods.aggregative)": [[53, "mlquantify.methods.aggregative.GAC", false]], "generate_artificial_indexes() (in module mlquantify.utils.general)": [[71, "mlquantify.utils.general.generate_artificial_indexes", false]], "generate_artificial_prevalences() (in module mlquantify.utils.general)": [[72, "mlquantify.utils.general.generate_artificial_prevalences", false]], "get_cond_prob_matrix() (mlquantify.methods.aggregative.gac class method)": [[53, "mlquantify.methods.aggregative.GAC.get_cond_prob_matrix", false]], "get_cond_prob_matrix() (mlquantify.methods.aggregative.gpac class method)": [[54, "mlquantify.methods.aggregative.GPAC.get_cond_prob_matrix", false]], "get_distance() (mlquantify.methods.aggregative.dys method)": [[49, "mlquantify.methods.aggregative.DyS.get_distance", false]], "get_distance() (mlquantify.methods.aggregative.dyssyn method)": [[50, "mlquantify.methods.aggregative.DySsyn.get_distance", false]], "get_distance() (mlquantify.methods.aggregative.hdy method)": [[55, "mlquantify.methods.aggregative.HDy.get_distance", false]], "get_distance() (mlquantify.methods.aggregative.smm method)": [[62, "mlquantify.methods.aggregative.SMM.get_distance", false]], "get_distance() (mlquantify.methods.aggregative.sord method)": [[63, "mlquantify.methods.aggregative.SORD.get_distance", false]], "get_measure() (in module mlquantify.utils.general)": [[73, "mlquantify.utils.general.get_measure", false]], "get_metadata_routing() (mlquantify.base.aggregativequantifier method)": [[30, "mlquantify.base.AggregativeQuantifier.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.base.nonaggregativequantifier method)": [[31, "mlquantify.base.NonAggregativeQuantifier.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.base.quantifier method)": [[32, "mlquantify.base.Quantifier.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.classification.methods.pwkclf method)": [[33, "mlquantify.classification.methods.PWKCLF.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.acc method)": [[47, "mlquantify.methods.aggregative.ACC.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.cc method)": [[48, "mlquantify.methods.aggregative.CC.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.dys method)": [[49, "mlquantify.methods.aggregative.DyS.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.dyssyn method)": [[50, "mlquantify.methods.aggregative.DySsyn.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.emq method)": [[51, "mlquantify.methods.aggregative.EMQ.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.fm method)": [[52, "mlquantify.methods.aggregative.FM.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.gac method)": [[53, "mlquantify.methods.aggregative.GAC.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.gpac method)": [[54, "mlquantify.methods.aggregative.GPAC.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.hdy method)": [[55, "mlquantify.methods.aggregative.HDy.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.max method)": [[56, "mlquantify.methods.aggregative.MAX.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.ms method)": [[57, "mlquantify.methods.aggregative.MS.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.ms2 method)": [[58, "mlquantify.methods.aggregative.MS2.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.pacc method)": [[59, "mlquantify.methods.aggregative.PACC.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.pcc method)": [[60, "mlquantify.methods.aggregative.PCC.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.pwk method)": [[61, "mlquantify.methods.aggregative.PWK.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.smm method)": [[62, "mlquantify.methods.aggregative.SMM.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.sord method)": [[63, "mlquantify.methods.aggregative.SORD.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.t50 method)": [[64, "mlquantify.methods.aggregative.T50.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.aggregative.x_method method)": [[65, "mlquantify.methods.aggregative.X_method.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.meta.ensemble method)": [[66, "mlquantify.methods.meta.Ensemble.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.methods.non_aggregative.hdx method)": [[67, "mlquantify.methods.non_aggregative.HDx.get_metadata_routing", false]], "get_metadata_routing() (mlquantify.model_selection.gridsearchq method)": [[68, "mlquantify.model_selection.GridSearchQ.get_metadata_routing", false]], "get_method() (in module mlquantify.utils.general)": [[74, "mlquantify.utils.general.get_method", false]], "get_params() (mlquantify.base.aggregativequantifier method)": [[30, "mlquantify.base.AggregativeQuantifier.get_params", false]], "get_params() (mlquantify.base.nonaggregativequantifier method)": [[31, "mlquantify.base.NonAggregativeQuantifier.get_params", false]], "get_params() (mlquantify.base.quantifier method)": [[32, "mlquantify.base.Quantifier.get_params", false]], "get_params() (mlquantify.classification.methods.pwkclf method)": [[33, "mlquantify.classification.methods.PWKCLF.get_params", false]], "get_params() (mlquantify.methods.aggregative.acc method)": [[47, "mlquantify.methods.aggregative.ACC.get_params", false]], "get_params() (mlquantify.methods.aggregative.cc method)": [[48, "mlquantify.methods.aggregative.CC.get_params", false]], "get_params() (mlquantify.methods.aggregative.dys method)": [[49, "mlquantify.methods.aggregative.DyS.get_params", false]], "get_params() (mlquantify.methods.aggregative.dyssyn method)": [[50, "mlquantify.methods.aggregative.DySsyn.get_params", false]], "get_params() (mlquantify.methods.aggregative.emq method)": [[51, "mlquantify.methods.aggregative.EMQ.get_params", false]], "get_params() (mlquantify.methods.aggregative.fm method)": [[52, "mlquantify.methods.aggregative.FM.get_params", false]], "get_params() (mlquantify.methods.aggregative.gac method)": [[53, "mlquantify.methods.aggregative.GAC.get_params", false]], "get_params() (mlquantify.methods.aggregative.gpac method)": [[54, "mlquantify.methods.aggregative.GPAC.get_params", false]], "get_params() (mlquantify.methods.aggregative.hdy method)": [[55, "mlquantify.methods.aggregative.HDy.get_params", false]], "get_params() (mlquantify.methods.aggregative.max method)": [[56, "mlquantify.methods.aggregative.MAX.get_params", false]], "get_params() (mlquantify.methods.aggregative.ms method)": [[57, "mlquantify.methods.aggregative.MS.get_params", false]], "get_params() (mlquantify.methods.aggregative.ms2 method)": [[58, "mlquantify.methods.aggregative.MS2.get_params", false]], "get_params() (mlquantify.methods.aggregative.pacc method)": [[59, "mlquantify.methods.aggregative.PACC.get_params", false]], "get_params() (mlquantify.methods.aggregative.pcc method)": [[60, "mlquantify.methods.aggregative.PCC.get_params", false]], "get_params() (mlquantify.methods.aggregative.pwk method)": [[61, "mlquantify.methods.aggregative.PWK.get_params", false]], "get_params() (mlquantify.methods.aggregative.smm method)": [[62, "mlquantify.methods.aggregative.SMM.get_params", false]], "get_params() (mlquantify.methods.aggregative.sord method)": [[63, "mlquantify.methods.aggregative.SORD.get_params", false]], "get_params() (mlquantify.methods.aggregative.t50 method)": [[64, "mlquantify.methods.aggregative.T50.get_params", false]], "get_params() (mlquantify.methods.aggregative.x_method method)": [[65, "mlquantify.methods.aggregative.X_method.get_params", false]], "get_params() (mlquantify.methods.meta.ensemble method)": [[66, "mlquantify.methods.meta.Ensemble.get_params", false]], "get_params() (mlquantify.methods.non_aggregative.hdx method)": [[67, "mlquantify.methods.non_aggregative.HDx.get_params", false]], "get_params() (mlquantify.model_selection.gridsearchq method)": [[68, "mlquantify.model_selection.GridSearchQ.get_params", false]], "get_real_prev() (in module mlquantify.utils.general)": [[75, "mlquantify.utils.general.get_real_prev", false]], "get_scores() (in module mlquantify.utils.method)": [[87, "mlquantify.utils.method.get_scores", false]], "gethist() (in module mlquantify.utils.method)": [[86, "mlquantify.utils.method.getHist", false]], "getmindistancesdys() (mlquantify.methods.aggregative.dys method)": [[49, "mlquantify.methods.aggregative.DyS.GetMinDistancesDyS", false]], "getmindistancesdyssyn() (mlquantify.methods.aggregative.dyssyn method)": [[50, "mlquantify.methods.aggregative.DySsyn.GetMinDistancesDySsyn", false]], "getmindistanceshdy() (mlquantify.methods.aggregative.hdy method)": [[55, "mlquantify.methods.aggregative.HDy.GetMinDistancesHDy", false]], "gpac (class in mlquantify.methods.aggregative)": [[54, "mlquantify.methods.aggregative.GPAC", false]], "gridsearchq (class in mlquantify.model_selection)": [[68, "mlquantify.model_selection.GridSearchQ", false]], "hdx (class in mlquantify.methods.non_aggregative)": [[67, "mlquantify.methods.non_aggregative.HDx", false]], "hdy (class in mlquantify.methods.aggregative)": [[55, "mlquantify.methods.aggregative.HDy", false]], "hellinger() (in module mlquantify.utils.method)": [[88, "mlquantify.utils.method.hellinger", false]], "is_multiclass (mlquantify.methods.aggregative.acc property)": [[47, "mlquantify.methods.aggregative.ACC.is_multiclass", false]], "is_multiclass (mlquantify.methods.aggregative.dys property)": [[49, "mlquantify.methods.aggregative.DyS.is_multiclass", false]], "is_multiclass (mlquantify.methods.aggregative.dyssyn property)": [[50, "mlquantify.methods.aggregative.DySsyn.is_multiclass", false]], "is_multiclass (mlquantify.methods.aggregative.hdy property)": [[55, "mlquantify.methods.aggregative.HDy.is_multiclass", false]], "is_multiclass (mlquantify.methods.aggregative.max property)": [[56, "mlquantify.methods.aggregative.MAX.is_multiclass", false]], "is_multiclass (mlquantify.methods.aggregative.ms property)": [[57, "mlquantify.methods.aggregative.MS.is_multiclass", false]], "is_multiclass (mlquantify.methods.aggregative.ms2 property)": [[58, "mlquantify.methods.aggregative.MS2.is_multiclass", false]], "is_multiclass (mlquantify.methods.aggregative.smm property)": [[62, "mlquantify.methods.aggregative.SMM.is_multiclass", false]], "is_multiclass (mlquantify.methods.aggregative.sord property)": [[63, "mlquantify.methods.aggregative.SORD.is_multiclass", false]], "is_multiclass (mlquantify.methods.aggregative.t50 property)": [[64, "mlquantify.methods.aggregative.T50.is_multiclass", false]], "is_multiclass (mlquantify.methods.aggregative.x_method property)": [[65, "mlquantify.methods.aggregative.X_method.is_multiclass", false]], "is_probabilistic (mlquantify.base.aggregativequantifier property)": [[30, "mlquantify.base.AggregativeQuantifier.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.acc property)": [[47, "mlquantify.methods.aggregative.ACC.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.cc property)": [[48, "mlquantify.methods.aggregative.CC.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.dys property)": [[49, "mlquantify.methods.aggregative.DyS.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.dyssyn property)": [[50, "mlquantify.methods.aggregative.DySsyn.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.emq property)": [[51, "mlquantify.methods.aggregative.EMQ.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.fm property)": [[52, "mlquantify.methods.aggregative.FM.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.gac property)": [[53, "mlquantify.methods.aggregative.GAC.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.gpac property)": [[54, "mlquantify.methods.aggregative.GPAC.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.hdy property)": [[55, "mlquantify.methods.aggregative.HDy.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.max property)": [[56, "mlquantify.methods.aggregative.MAX.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.ms property)": [[57, "mlquantify.methods.aggregative.MS.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.ms2 property)": [[58, "mlquantify.methods.aggregative.MS2.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.pacc property)": [[59, "mlquantify.methods.aggregative.PACC.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.pcc property)": [[60, "mlquantify.methods.aggregative.PCC.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.pwk property)": [[61, "mlquantify.methods.aggregative.PWK.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.smm property)": [[62, "mlquantify.methods.aggregative.SMM.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.sord property)": [[63, "mlquantify.methods.aggregative.SORD.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.t50 property)": [[64, "mlquantify.methods.aggregative.T50.is_probabilistic", false]], "is_probabilistic (mlquantify.methods.aggregative.x_method property)": [[65, "mlquantify.methods.aggregative.X_method.is_probabilistic", false]], "kullback_leibler_divergence() (in module mlquantify.evaluation.measures)": [[35, "mlquantify.evaluation.measures.kullback_leibler_divergence", false]], "learner (mlquantify.base.aggregativequantifier property)": [[30, "mlquantify.base.AggregativeQuantifier.learner", false]], "learner (mlquantify.methods.aggregative.acc property)": [[47, "mlquantify.methods.aggregative.ACC.learner", false]], "learner (mlquantify.methods.aggregative.cc property)": [[48, "mlquantify.methods.aggregative.CC.learner", false]], "learner (mlquantify.methods.aggregative.dys property)": [[49, "mlquantify.methods.aggregative.DyS.learner", false]], "learner (mlquantify.methods.aggregative.dyssyn property)": [[50, "mlquantify.methods.aggregative.DySsyn.learner", false]], "learner (mlquantify.methods.aggregative.emq property)": [[51, "mlquantify.methods.aggregative.EMQ.learner", false]], "learner (mlquantify.methods.aggregative.fm property)": [[52, "mlquantify.methods.aggregative.FM.learner", false]], "learner (mlquantify.methods.aggregative.gac property)": [[53, "mlquantify.methods.aggregative.GAC.learner", false]], "learner (mlquantify.methods.aggregative.gpac property)": [[54, "mlquantify.methods.aggregative.GPAC.learner", false]], "learner (mlquantify.methods.aggregative.hdy property)": [[55, "mlquantify.methods.aggregative.HDy.learner", false]], "learner (mlquantify.methods.aggregative.max property)": [[56, "mlquantify.methods.aggregative.MAX.learner", false]], "learner (mlquantify.methods.aggregative.ms property)": [[57, "mlquantify.methods.aggregative.MS.learner", false]], "learner (mlquantify.methods.aggregative.ms2 property)": [[58, "mlquantify.methods.aggregative.MS2.learner", false]], "learner (mlquantify.methods.aggregative.pacc property)": [[59, "mlquantify.methods.aggregative.PACC.learner", false]], "learner (mlquantify.methods.aggregative.pcc property)": [[60, "mlquantify.methods.aggregative.PCC.learner", false]], "learner (mlquantify.methods.aggregative.pwk property)": [[61, "mlquantify.methods.aggregative.PWK.learner", false]], "learner (mlquantify.methods.aggregative.smm property)": [[62, "mlquantify.methods.aggregative.SMM.learner", false]], "learner (mlquantify.methods.aggregative.sord property)": [[63, "mlquantify.methods.aggregative.SORD.learner", false]], "learner (mlquantify.methods.aggregative.t50 property)": [[64, "mlquantify.methods.aggregative.T50.learner", false]], "learner (mlquantify.methods.aggregative.x_method property)": [[65, "mlquantify.methods.aggregative.X_method.learner", false]], "load_quantifier() (in module mlquantify.utils.general)": [[76, "mlquantify.utils.general.load_quantifier", false]], "make_prevs() (in module mlquantify.utils.general)": [[77, "mlquantify.utils.general.make_prevs", false]], "max (class in mlquantify.methods.aggregative)": [[56, "mlquantify.methods.aggregative.MAX", false]], "mean_absolute_error() (in module mlquantify.evaluation.measures)": [[36, "mlquantify.evaluation.measures.mean_absolute_error", false]], "mean_squared_error() (in module mlquantify.evaluation.measures)": [[37, "mlquantify.evaluation.measures.mean_squared_error", false]], "mlquantify": [[2, "module-mlquantify", false]], "mlquantify.base": [[3, "module-mlquantify.base", false]], "mlquantify.classification.methods": [[4, "module-mlquantify.classification.methods", false]], "mlquantify.evaluation.measures": [[5, "module-mlquantify.evaluation.measures", false]], "mlquantify.evaluation.protocol": [[6, "module-mlquantify.evaluation.protocol", false]], "mlquantify.methods.aggregative": [[7, "module-mlquantify.methods.aggregative", false]], "mlquantify.methods.meta": [[8, "module-mlquantify.methods.meta", false]], "mlquantify.methods.non_aggregative": [[9, "module-mlquantify.methods.non_aggregative", false]], "mlquantify.model_selection": [[10, "module-mlquantify.model_selection", false]], "mlquantify.utils.general": [[11, "module-mlquantify.utils.general", false]], "mlquantify.utils.method": [[12, "module-mlquantify.utils.method", false]], "module": [[2, "module-mlquantify", false], [3, "module-mlquantify.base", false], [4, "module-mlquantify.classification.methods", false], [5, "module-mlquantify.evaluation.measures", false], [6, "module-mlquantify.evaluation.protocol", false], [7, "module-mlquantify.methods.aggregative", false], [8, "module-mlquantify.methods.meta", false], [9, "module-mlquantify.methods.non_aggregative", false], [10, "module-mlquantify.model_selection", false], [11, "module-mlquantify.utils.general", false], [12, "module-mlquantify.utils.method", false]], "moss() (in module mlquantify.utils.method)": [[81, "mlquantify.utils.method.MoSS", false]], "ms (class in mlquantify.methods.aggregative)": [[57, "mlquantify.methods.aggregative.MS", false]], "ms2 (class in mlquantify.methods.aggregative)": [[58, "mlquantify.methods.aggregative.MS2", false]], "nonaggregativequantifier (class in mlquantify.base)": [[31, "mlquantify.base.NonAggregativeQuantifier", false]], "normalize_prevalence() (in module mlquantify.utils.general)": [[78, "mlquantify.utils.general.normalize_prevalence", false]], "normalized_absolute_error() (in module mlquantify.evaluation.measures)": [[38, "mlquantify.evaluation.measures.normalized_absolute_error", false]], "normalized_kullback_leibler_divergence() (in module mlquantify.evaluation.measures)": [[39, "mlquantify.evaluation.measures.normalized_kullback_leibler_divergence", false]], "normalized_relative_absolute_error() (in module mlquantify.evaluation.measures)": [[40, "mlquantify.evaluation.measures.normalized_relative_absolute_error", false]], "npp (class in mlquantify.evaluation.protocol)": [[45, "mlquantify.evaluation.protocol.NPP", false]], "pacc (class in mlquantify.methods.aggregative)": [[59, "mlquantify.methods.aggregative.PACC", false]], "parallel() (in module mlquantify.utils.general)": [[79, "mlquantify.utils.general.parallel", false]], "pcc (class in mlquantify.methods.aggregative)": [[60, "mlquantify.methods.aggregative.PCC", false]], "predict() (mlquantify.base.aggregativequantifier method)": [[30, "mlquantify.base.AggregativeQuantifier.predict", false]], "predict() (mlquantify.base.nonaggregativequantifier method)": [[31, "mlquantify.base.NonAggregativeQuantifier.predict", false]], "predict() (mlquantify.classification.methods.pwkclf method)": [[33, "mlquantify.classification.methods.PWKCLF.predict", false]], "predict() (mlquantify.evaluation.protocol.app method)": [[44, "mlquantify.evaluation.protocol.APP.predict", false]], "predict() (mlquantify.evaluation.protocol.npp method)": [[45, "mlquantify.evaluation.protocol.NPP.predict", false]], "predict() (mlquantify.evaluation.protocol.protocol method)": [[46, "mlquantify.evaluation.protocol.Protocol.predict", false]], "predict() (mlquantify.methods.aggregative.acc method)": [[47, "mlquantify.methods.aggregative.ACC.predict", false]], "predict() (mlquantify.methods.aggregative.cc method)": [[48, "mlquantify.methods.aggregative.CC.predict", false]], "predict() (mlquantify.methods.aggregative.dys method)": [[49, "mlquantify.methods.aggregative.DyS.predict", false]], "predict() (mlquantify.methods.aggregative.dyssyn method)": [[50, "mlquantify.methods.aggregative.DySsyn.predict", false]], "predict() (mlquantify.methods.aggregative.emq method)": [[51, "mlquantify.methods.aggregative.EMQ.predict", false]], "predict() (mlquantify.methods.aggregative.fm method)": [[52, "mlquantify.methods.aggregative.FM.predict", false]], "predict() (mlquantify.methods.aggregative.gac method)": [[53, "mlquantify.methods.aggregative.GAC.predict", false]], "predict() (mlquantify.methods.aggregative.gpac method)": [[54, "mlquantify.methods.aggregative.GPAC.predict", false]], "predict() (mlquantify.methods.aggregative.hdy method)": [[55, "mlquantify.methods.aggregative.HDy.predict", false]], "predict() (mlquantify.methods.aggregative.max method)": [[56, "mlquantify.methods.aggregative.MAX.predict", false]], "predict() (mlquantify.methods.aggregative.ms method)": [[57, "mlquantify.methods.aggregative.MS.predict", false]], "predict() (mlquantify.methods.aggregative.ms2 method)": [[58, "mlquantify.methods.aggregative.MS2.predict", false]], "predict() (mlquantify.methods.aggregative.pacc method)": [[59, "mlquantify.methods.aggregative.PACC.predict", false]], "predict() (mlquantify.methods.aggregative.pcc method)": [[60, "mlquantify.methods.aggregative.PCC.predict", false]], "predict() (mlquantify.methods.aggregative.pwk method)": [[61, "mlquantify.methods.aggregative.PWK.predict", false]], "predict() (mlquantify.methods.aggregative.smm method)": [[62, "mlquantify.methods.aggregative.SMM.predict", false]], "predict() (mlquantify.methods.aggregative.sord method)": [[63, "mlquantify.methods.aggregative.SORD.predict", false]], "predict() (mlquantify.methods.aggregative.t50 method)": [[64, "mlquantify.methods.aggregative.T50.predict", false]], "predict() (mlquantify.methods.aggregative.x_method method)": [[65, "mlquantify.methods.aggregative.X_method.predict", false]], "predict() (mlquantify.methods.meta.ensemble method)": [[66, "mlquantify.methods.meta.Ensemble.predict", false]], "predict() (mlquantify.methods.non_aggregative.hdx method)": [[67, "mlquantify.methods.non_aggregative.HDx.predict", false]], "predict() (mlquantify.model_selection.gridsearchq method)": [[68, "mlquantify.model_selection.GridSearchQ.predict", false]], "predict_learner() (mlquantify.base.aggregativequantifier method)": [[30, "mlquantify.base.AggregativeQuantifier.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.acc method)": [[47, "mlquantify.methods.aggregative.ACC.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.cc method)": [[48, "mlquantify.methods.aggregative.CC.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.dys method)": [[49, "mlquantify.methods.aggregative.DyS.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.dyssyn method)": [[50, "mlquantify.methods.aggregative.DySsyn.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.emq method)": [[51, "mlquantify.methods.aggregative.EMQ.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.fm method)": [[52, "mlquantify.methods.aggregative.FM.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.gac method)": [[53, "mlquantify.methods.aggregative.GAC.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.gpac method)": [[54, "mlquantify.methods.aggregative.GPAC.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.hdy method)": [[55, "mlquantify.methods.aggregative.HDy.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.max method)": [[56, "mlquantify.methods.aggregative.MAX.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.ms method)": [[57, "mlquantify.methods.aggregative.MS.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.ms2 method)": [[58, "mlquantify.methods.aggregative.MS2.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.pacc method)": [[59, "mlquantify.methods.aggregative.PACC.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.pcc method)": [[60, "mlquantify.methods.aggregative.PCC.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.pwk method)": [[61, "mlquantify.methods.aggregative.PWK.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.smm method)": [[62, "mlquantify.methods.aggregative.SMM.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.sord method)": [[63, "mlquantify.methods.aggregative.SORD.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.t50 method)": [[64, "mlquantify.methods.aggregative.T50.predict_learner", false]], "predict_learner() (mlquantify.methods.aggregative.x_method method)": [[65, "mlquantify.methods.aggregative.X_method.predict_learner", false]], "predict_proba() (mlquantify.methods.aggregative.emq method)": [[51, "mlquantify.methods.aggregative.EMQ.predict_proba", false]], "predict_protocol() (mlquantify.evaluation.protocol.app method)": [[44, "mlquantify.evaluation.protocol.APP.predict_protocol", false]], "predict_protocol() (mlquantify.evaluation.protocol.npp method)": [[45, "mlquantify.evaluation.protocol.NPP.predict_protocol", false]], "predict_protocol() (mlquantify.evaluation.protocol.protocol method)": [[46, "mlquantify.evaluation.protocol.Protocol.predict_protocol", false]], "probsymm() (in module mlquantify.utils.method)": [[89, "mlquantify.utils.method.probsymm", false]], "process_inputs() (in module mlquantify.evaluation.measures)": [[41, "mlquantify.evaluation.measures.process_inputs", false]], "protocol (class in mlquantify.evaluation.protocol)": [[46, "mlquantify.evaluation.protocol.Protocol", false]], "ptr_selection_metric() (mlquantify.methods.meta.ensemble method)": [[66, "mlquantify.methods.meta.Ensemble.ptr_selection_metric", false]], "pwk (class in mlquantify.methods.aggregative)": [[61, "mlquantify.methods.aggregative.PWK", false]], "pwkclf (class in mlquantify.classification.methods)": [[33, "mlquantify.classification.methods.PWKCLF", false]], "quantifier (class in mlquantify.base)": [[32, "mlquantify.base.Quantifier", false]], "relative_absolute_error() (in module mlquantify.evaluation.measures)": [[42, "mlquantify.evaluation.measures.relative_absolute_error", false]], "round_protocol_df() (in module mlquantify.utils.general)": [[80, "mlquantify.utils.general.round_protocol_df", false]], "set_arguments() (in module mlquantify)": [[69, "mlquantify.set_arguments", false]], "set_fit_request() (mlquantify.base.aggregativequantifier method)": [[30, "mlquantify.base.AggregativeQuantifier.set_fit_request", false]], "set_fit_request() (mlquantify.base.nonaggregativequantifier method)": [[31, "mlquantify.base.NonAggregativeQuantifier.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.acc method)": [[47, "mlquantify.methods.aggregative.ACC.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.cc method)": [[48, "mlquantify.methods.aggregative.CC.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.dys method)": [[49, "mlquantify.methods.aggregative.DyS.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.dyssyn method)": [[50, "mlquantify.methods.aggregative.DySsyn.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.emq method)": [[51, "mlquantify.methods.aggregative.EMQ.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.fm method)": [[52, "mlquantify.methods.aggregative.FM.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.gac method)": [[53, "mlquantify.methods.aggregative.GAC.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.gpac method)": [[54, "mlquantify.methods.aggregative.GPAC.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.hdy method)": [[55, "mlquantify.methods.aggregative.HDy.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.max method)": [[56, "mlquantify.methods.aggregative.MAX.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.ms method)": [[57, "mlquantify.methods.aggregative.MS.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.ms2 method)": [[58, "mlquantify.methods.aggregative.MS2.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.pacc method)": [[59, "mlquantify.methods.aggregative.PACC.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.pcc method)": [[60, "mlquantify.methods.aggregative.PCC.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.pwk method)": [[61, "mlquantify.methods.aggregative.PWK.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.smm method)": [[62, "mlquantify.methods.aggregative.SMM.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.sord method)": [[63, "mlquantify.methods.aggregative.SORD.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.t50 method)": [[64, "mlquantify.methods.aggregative.T50.set_fit_request", false]], "set_fit_request() (mlquantify.methods.aggregative.x_method method)": [[65, "mlquantify.methods.aggregative.X_method.set_fit_request", false]], "set_fit_request() (mlquantify.methods.non_aggregative.hdx method)": [[67, "mlquantify.methods.non_aggregative.HDx.set_fit_request", false]], "set_params() (mlquantify.base.aggregativequantifier method)": [[30, "mlquantify.base.AggregativeQuantifier.set_params", false]], "set_params() (mlquantify.base.nonaggregativequantifier method)": [[31, "mlquantify.base.NonAggregativeQuantifier.set_params", false]], "set_params() (mlquantify.base.quantifier method)": [[32, "mlquantify.base.Quantifier.set_params", false]], "set_params() (mlquantify.classification.methods.pwkclf method)": [[33, "mlquantify.classification.methods.PWKCLF.set_params", false]], "set_params() (mlquantify.methods.aggregative.acc method)": [[47, "mlquantify.methods.aggregative.ACC.set_params", false]], "set_params() (mlquantify.methods.aggregative.cc method)": [[48, "mlquantify.methods.aggregative.CC.set_params", false]], "set_params() (mlquantify.methods.aggregative.dys method)": [[49, "mlquantify.methods.aggregative.DyS.set_params", false]], "set_params() (mlquantify.methods.aggregative.dyssyn method)": [[50, "mlquantify.methods.aggregative.DySsyn.set_params", false]], "set_params() (mlquantify.methods.aggregative.emq method)": [[51, "mlquantify.methods.aggregative.EMQ.set_params", false]], "set_params() (mlquantify.methods.aggregative.fm method)": [[52, "mlquantify.methods.aggregative.FM.set_params", false]], "set_params() (mlquantify.methods.aggregative.gac method)": [[53, "mlquantify.methods.aggregative.GAC.set_params", false]], "set_params() (mlquantify.methods.aggregative.gpac method)": [[54, "mlquantify.methods.aggregative.GPAC.set_params", false]], "set_params() (mlquantify.methods.aggregative.hdy method)": [[55, "mlquantify.methods.aggregative.HDy.set_params", false]], "set_params() (mlquantify.methods.aggregative.max method)": [[56, "mlquantify.methods.aggregative.MAX.set_params", false]], "set_params() (mlquantify.methods.aggregative.ms method)": [[57, "mlquantify.methods.aggregative.MS.set_params", false]], "set_params() (mlquantify.methods.aggregative.ms2 method)": [[58, "mlquantify.methods.aggregative.MS2.set_params", false]], "set_params() (mlquantify.methods.aggregative.pacc method)": [[59, "mlquantify.methods.aggregative.PACC.set_params", false]], "set_params() (mlquantify.methods.aggregative.pcc method)": [[60, "mlquantify.methods.aggregative.PCC.set_params", false]], "set_params() (mlquantify.methods.aggregative.pwk method)": [[61, "mlquantify.methods.aggregative.PWK.set_params", false]], "set_params() (mlquantify.methods.aggregative.smm method)": [[62, "mlquantify.methods.aggregative.SMM.set_params", false]], "set_params() (mlquantify.methods.aggregative.sord method)": [[63, "mlquantify.methods.aggregative.SORD.set_params", false]], "set_params() (mlquantify.methods.aggregative.t50 method)": [[64, "mlquantify.methods.aggregative.T50.set_params", false]], "set_params() (mlquantify.methods.aggregative.x_method method)": [[65, "mlquantify.methods.aggregative.X_method.set_params", false]], "set_params() (mlquantify.methods.meta.ensemble method)": [[66, "mlquantify.methods.meta.Ensemble.set_params", false]], "set_params() (mlquantify.methods.non_aggregative.hdx method)": [[67, "mlquantify.methods.non_aggregative.HDx.set_params", false]], "set_params() (mlquantify.model_selection.gridsearchq method)": [[68, "mlquantify.model_selection.GridSearchQ.set_params", false]], "set_predict_proba_request() (mlquantify.methods.aggregative.emq method)": [[51, "mlquantify.methods.aggregative.EMQ.set_predict_proba_request", false]], "smm (class in mlquantify.methods.aggregative)": [[62, "mlquantify.methods.aggregative.SMM", false]], "solve_adjustment() (mlquantify.methods.aggregative.gac class method)": [[53, "mlquantify.methods.aggregative.GAC.solve_adjustment", false]], "sord (class in mlquantify.methods.aggregative)": [[63, "mlquantify.methods.aggregative.SORD", false]], "sout() (mlquantify.evaluation.protocol.app method)": [[44, "mlquantify.evaluation.protocol.APP.sout", false]], "sout() (mlquantify.evaluation.protocol.npp method)": [[45, "mlquantify.evaluation.protocol.NPP.sout", false]], "sout() (mlquantify.evaluation.protocol.protocol method)": [[46, "mlquantify.evaluation.protocol.Protocol.sout", false]], "sout() (mlquantify.methods.meta.ensemble method)": [[66, "mlquantify.methods.meta.Ensemble.sout", false]], "sout() (mlquantify.model_selection.gridsearchq method)": [[68, "mlquantify.model_selection.GridSearchQ.sout", false]], "sqeuclidean() (in module mlquantify.utils.method)": [[90, "mlquantify.utils.method.sqEuclidean", false]], "squared_error() (in module mlquantify.evaluation.measures)": [[43, "mlquantify.evaluation.measures.squared_error", false]], "t50 (class in mlquantify.methods.aggregative)": [[64, "mlquantify.methods.aggregative.T50", false]], "ternary_search() (in module mlquantify.utils.method)": [[91, "mlquantify.utils.method.ternary_search", false]], "topsoe() (in module mlquantify.utils.method)": [[92, "mlquantify.utils.method.topsoe", false]], "x_method (class in mlquantify.methods.aggregative)": [[65, "mlquantify.methods.aggregative.X_method", false]]}, "objects": {"": [[2, 0, 0, "-", "mlquantify"]], "mlquantify": [[3, 0, 0, "-", "base"], [10, 0, 0, "-", "model_selection"], [69, 4, 1, "", "set_arguments"]], "mlquantify.base": [[30, 1, 1, "", "AggregativeQuantifier"], [31, 1, 1, "", "NonAggregativeQuantifier"], [32, 1, 1, "", "Quantifier"]], "mlquantify.base.AggregativeQuantifier": [[30, 2, 1, "", "delayed_fit"], [30, 2, 1, "", "delayed_predict"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "fit_learner"], [30, 2, 1, "", "get_metadata_routing"], [30, 2, 1, "", "get_params"], [30, 3, 1, "", "is_probabilistic"], [30, 3, 1, "", "learner"], [30, 2, 1, "", "predict"], [30, 2, 1, "", "predict_learner"], [30, 2, 1, "", "set_fit_request"], [30, 2, 1, "", "set_params"]], "mlquantify.base.NonAggregativeQuantifier": [[31, 2, 1, "", "fit"], [31, 2, 1, "", "get_metadata_routing"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "predict"], [31, 2, 1, "", "set_fit_request"], [31, 2, 1, "", "set_params"]], "mlquantify.base.Quantifier": [[32, 2, 1, "", "get_metadata_routing"], [32, 2, 1, "", "get_params"], [32, 2, 1, "", "set_params"]], "mlquantify.classification": [[4, 0, 0, "-", "methods"]], "mlquantify.classification.methods": [[33, 1, 1, "", "PWKCLF"]], "mlquantify.classification.methods.PWKCLF": [[33, 2, 1, "", "fit"], [33, 2, 1, "", "get_metadata_routing"], [33, 2, 1, "", "get_params"], [33, 2, 1, "", "predict"], [33, 2, 1, "", "set_params"]], "mlquantify.evaluation": [[5, 0, 0, "-", "measures"], [6, 0, 0, "-", "protocol"]], "mlquantify.evaluation.measures": [[34, 4, 1, "", "absolute_error"], [35, 4, 1, "", "kullback_leibler_divergence"], [36, 4, 1, "", "mean_absolute_error"], [37, 4, 1, "", "mean_squared_error"], [38, 4, 1, "", "normalized_absolute_error"], [39, 4, 1, "", "normalized_kullback_leibler_divergence"], [40, 4, 1, "", "normalized_relative_absolute_error"], [41, 4, 1, "", "process_inputs"], [42, 4, 1, "", "relative_absolute_error"], [43, 4, 1, "", "squared_error"]], "mlquantify.evaluation.protocol": [[44, 1, 1, "", "APP"], [45, 1, 1, "", "NPP"], [46, 1, 1, "", "Protocol"]], "mlquantify.evaluation.protocol.APP": [[44, 2, 1, "", "fit"], [44, 2, 1, "", "predict"], [44, 2, 1, "", "predict_protocol"], [44, 2, 1, "", "sout"]], "mlquantify.evaluation.protocol.NPP": [[45, 2, 1, "", "fit"], [45, 2, 1, "", "predict"], [45, 2, 1, "", "predict_protocol"], [45, 2, 1, "", "sout"]], "mlquantify.evaluation.protocol.Protocol": [[46, 2, 1, "", "fit"], [46, 2, 1, "", "predict"], [46, 2, 1, "", "predict_protocol"], [46, 2, 1, "", "sout"]], "mlquantify.methods": [[7, 0, 0, "-", "aggregative"], [8, 0, 0, "-", "meta"], [9, 0, 0, "-", "non_aggregative"]], "mlquantify.methods.aggregative": [[47, 1, 1, "", "ACC"], [48, 1, 1, "", "CC"], [49, 1, 1, "", "DyS"], [50, 1, 1, "", "DySsyn"], [51, 1, 1, "", "EMQ"], [52, 1, 1, "", "FM"], [53, 1, 1, "", "GAC"], [54, 1, 1, "", "GPAC"], [55, 1, 1, "", "HDy"], [56, 1, 1, "", "MAX"], [57, 1, 1, "", "MS"], [58, 1, 1, "", "MS2"], [59, 1, 1, "", "PACC"], [60, 1, 1, "", "PCC"], [61, 1, 1, "", "PWK"], [62, 1, 1, "", "SMM"], [63, 1, 1, "", "SORD"], [64, 1, 1, "", "T50"], [65, 1, 1, "", "X_method"]], "mlquantify.methods.aggregative.ACC": [[47, 2, 1, "", "best_tprfpr"], [47, 2, 1, "", "delayed_fit"], [47, 2, 1, "", "delayed_predict"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "fit_learner"], [47, 2, 1, "", "get_metadata_routing"], [47, 2, 1, "", "get_params"], [47, 3, 1, "", "is_multiclass"], [47, 3, 1, "", "is_probabilistic"], [47, 3, 1, "", "learner"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "predict_learner"], [47, 2, 1, "", "set_fit_request"], [47, 2, 1, "", "set_params"]], "mlquantify.methods.aggregative.CC": [[48, 2, 1, "", "delayed_fit"], [48, 2, 1, "", "delayed_predict"], [48, 2, 1, "", "fit"], [48, 2, 1, "", "fit_learner"], [48, 2, 1, "", "get_metadata_routing"], [48, 2, 1, "", "get_params"], [48, 3, 1, "", "is_probabilistic"], [48, 3, 1, "", "learner"], [48, 2, 1, "", "predict"], [48, 2, 1, "", "predict_learner"], [48, 2, 1, "", "set_fit_request"], [48, 2, 1, "", "set_params"]], "mlquantify.methods.aggregative.DyS": [[49, 2, 1, "", "GetMinDistancesDyS"], [49, 2, 1, "", "best_distance"], [49, 2, 1, "", "delayed_fit"], [49, 2, 1, "", "delayed_predict"], [49, 2, 1, "", "fit"], [49, 2, 1, "", "fit_learner"], [49, 2, 1, "", "get_distance"], [49, 2, 1, "", "get_metadata_routing"], [49, 2, 1, "", "get_params"], [49, 3, 1, "", "is_multiclass"], [49, 3, 1, "", "is_probabilistic"], [49, 3, 1, "", "learner"], [49, 2, 1, "", "predict"], [49, 2, 1, "", "predict_learner"], [49, 2, 1, "", "set_fit_request"], [49, 2, 1, "", "set_params"]], "mlquantify.methods.aggregative.DySsyn": [[50, 2, 1, "", "GetMinDistancesDySsyn"], [50, 2, 1, "", "best_distance"], [50, 2, 1, "", "delayed_fit"], [50, 2, 1, "", "delayed_predict"], [50, 2, 1, "", "fit"], [50, 2, 1, "", "fit_learner"], [50, 2, 1, "", "get_distance"], [50, 2, 1, "", "get_metadata_routing"], [50, 2, 1, "", "get_params"], [50, 3, 1, "", "is_multiclass"], [50, 3, 1, "", "is_probabilistic"], [50, 3, 1, "", "learner"], [50, 2, 1, "", "predict"], [50, 2, 1, "", "predict_learner"], [50, 2, 1, "", "set_fit_request"], [50, 2, 1, "", "set_params"]], "mlquantify.methods.aggregative.EMQ": [[51, 2, 1, "", "EM"], [51, 2, 1, "", "delayed_fit"], [51, 2, 1, "", "delayed_predict"], [51, 2, 1, "", "fit"], [51, 2, 1, "", "fit_learner"], [51, 2, 1, "", "get_metadata_routing"], [51, 2, 1, "", "get_params"], [51, 3, 1, "", "is_probabilistic"], [51, 3, 1, "", "learner"], [51, 2, 1, "", "predict"], [51, 2, 1, "", "predict_learner"], [51, 2, 1, "", "predict_proba"], [51, 2, 1, "", "set_fit_request"], [51, 2, 1, "", "set_params"], [51, 2, 1, "", "set_predict_proba_request"]], "mlquantify.methods.aggregative.FM": [[52, 2, 1, "", "delayed_fit"], [52, 2, 1, "", "delayed_predict"], [52, 2, 1, "", "fit"], [52, 2, 1, "", "fit_learner"], [52, 2, 1, "", "get_metadata_routing"], [52, 2, 1, "", "get_params"], [52, 3, 1, "", "is_probabilistic"], [52, 3, 1, "", "learner"], [52, 2, 1, "", "predict"], [52, 2, 1, "", "predict_learner"], [52, 2, 1, "", "set_fit_request"], [52, 2, 1, "", "set_params"]], "mlquantify.methods.aggregative.GAC": [[53, 2, 1, "", "delayed_fit"], [53, 2, 1, "", "delayed_predict"], [53, 2, 1, "", "fit"], [53, 2, 1, "", "fit_learner"], [53, 2, 1, "", "get_cond_prob_matrix"], [53, 2, 1, "", "get_metadata_routing"], [53, 2, 1, "", "get_params"], [53, 3, 1, "", "is_probabilistic"], [53, 3, 1, "", "learner"], [53, 2, 1, "", "predict"], [53, 2, 1, "", "predict_learner"], [53, 2, 1, "", "set_fit_request"], [53, 2, 1, "", "set_params"], [53, 2, 1, "", "solve_adjustment"]], "mlquantify.methods.aggregative.GPAC": [[54, 2, 1, "", "delayed_fit"], [54, 2, 1, "", "delayed_predict"], [54, 2, 1, "", "fit"], [54, 2, 1, "", "fit_learner"], [54, 2, 1, "", "get_cond_prob_matrix"], [54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 3, 1, "", "is_probabilistic"], [54, 3, 1, "", "learner"], [54, 2, 1, "", "predict"], [54, 2, 1, "", "predict_learner"], [54, 2, 1, "", "set_fit_request"], [54, 2, 1, "", "set_params"]], "mlquantify.methods.aggregative.HDy": [[55, 2, 1, "", "GetMinDistancesHDy"], [55, 2, 1, "", "best_distance"], [55, 2, 1, "", "delayed_fit"], [55, 2, 1, "", "delayed_predict"], [55, 2, 1, "", "fit"], [55, 2, 1, "", "fit_learner"], [55, 2, 1, "", "get_distance"], [55, 2, 1, "", "get_metadata_routing"], [55, 2, 1, "", "get_params"], [55, 3, 1, "", "is_multiclass"], [55, 3, 1, "", "is_probabilistic"], [55, 3, 1, "", "learner"], [55, 2, 1, "", "predict"], [55, 2, 1, "", "predict_learner"], [55, 2, 1, "", "set_fit_request"], [55, 2, 1, "", "set_params"]], "mlquantify.methods.aggregative.MAX": [[56, 2, 1, "", "best_tprfpr"], [56, 2, 1, "", "delayed_fit"], [56, 2, 1, "", "delayed_predict"], [56, 2, 1, "", "fit"], [56, 2, 1, "", "fit_learner"], [56, 2, 1, "", "get_metadata_routing"], [56, 2, 1, "", "get_params"], [56, 3, 1, "", "is_multiclass"], [56, 3, 1, "", "is_probabilistic"], [56, 3, 1, "", "learner"], [56, 2, 1, "", "predict"], [56, 2, 1, "", "predict_learner"], [56, 2, 1, "", "set_fit_request"], [56, 2, 1, "", "set_params"]], "mlquantify.methods.aggregative.MS": [[57, 2, 1, "", "best_tprfpr"], [57, 2, 1, "", "delayed_fit"], [57, 2, 1, "", "delayed_predict"], [57, 2, 1, "", "fit"], [57, 2, 1, "", "fit_learner"], [57, 2, 1, "", "get_metadata_routing"], [57, 2, 1, "", "get_params"], [57, 3, 1, "", "is_multiclass"], [57, 3, 1, "", "is_probabilistic"], [57, 3, 1, "", "learner"], [57, 2, 1, "", "predict"], [57, 2, 1, "", "predict_learner"], [57, 2, 1, "", "set_fit_request"], [57, 2, 1, "", "set_params"]], "mlquantify.methods.aggregative.MS2": [[58, 2, 1, "", "best_tprfpr"], [58, 2, 1, "", "delayed_fit"], [58, 2, 1, "", "delayed_predict"], [58, 2, 1, "", "fit"], [58, 2, 1, "", "fit_learner"], [58, 2, 1, "", "get_metadata_routing"], [58, 2, 1, "", "get_params"], [58, 3, 1, "", "is_multiclass"], [58, 3, 1, "", "is_probabilistic"], [58, 3, 1, "", "learner"], [58, 2, 1, "", "predict"], [58, 2, 1, "", "predict_learner"], [58, 2, 1, "", "set_fit_request"], [58, 2, 1, "", "set_params"]], "mlquantify.methods.aggregative.PACC": [[59, 2, 1, "", "delayed_fit"], [59, 2, 1, "", "delayed_predict"], [59, 2, 1, "", "fit"], [59, 2, 1, "", "fit_learner"], [59, 2, 1, "", "get_metadata_routing"], [59, 2, 1, "", "get_params"], [59, 3, 1, "", "is_probabilistic"], [59, 3, 1, "", "learner"], [59, 2, 1, "", "predict"], [59, 2, 1, "", "predict_learner"], [59, 2, 1, "", "set_fit_request"], [59, 2, 1, "", "set_params"]], "mlquantify.methods.aggregative.PCC": [[60, 2, 1, "", "delayed_fit"], [60, 2, 1, "", "delayed_predict"], [60, 2, 1, "", "fit"], [60, 2, 1, "", "fit_learner"], [60, 2, 1, "", "get_metadata_routing"], [60, 2, 1, "", "get_params"], [60, 3, 1, "", "is_probabilistic"], [60, 3, 1, "", "learner"], [60, 2, 1, "", "predict"], [60, 2, 1, "", "predict_learner"], [60, 2, 1, "", "set_fit_request"], [60, 2, 1, "", "set_params"]], "mlquantify.methods.aggregative.PWK": [[61, 2, 1, "", "delayed_fit"], [61, 2, 1, "", "delayed_predict"], [61, 2, 1, "", "fit"], [61, 2, 1, "", "fit_learner"], [61, 2, 1, "", "get_metadata_routing"], [61, 2, 1, "", "get_params"], [61, 3, 1, "", "is_probabilistic"], [61, 3, 1, "", "learner"], [61, 2, 1, "", "predict"], [61, 2, 1, "", "predict_learner"], [61, 2, 1, "", "set_fit_request"], [61, 2, 1, "", "set_params"]], "mlquantify.methods.aggregative.SMM": [[62, 2, 1, "", "delayed_fit"], [62, 2, 1, "", "delayed_predict"], [62, 2, 1, "", "fit"], [62, 2, 1, "", "fit_learner"], [62, 2, 1, "", "get_distance"], [62, 2, 1, "", "get_metadata_routing"], [62, 2, 1, "", "get_params"], [62, 3, 1, "", "is_multiclass"], [62, 3, 1, "", "is_probabilistic"], [62, 3, 1, "", "learner"], [62, 2, 1, "", "predict"], [62, 2, 1, "", "predict_learner"], [62, 2, 1, "", "set_fit_request"], [62, 2, 1, "", "set_params"]], "mlquantify.methods.aggregative.SORD": [[63, 2, 1, "", "delayed_fit"], [63, 2, 1, "", "delayed_predict"], [63, 2, 1, "", "fit"], [63, 2, 1, "", "fit_learner"], [63, 2, 1, "", "get_distance"], [63, 2, 1, "", "get_metadata_routing"], [63, 2, 1, "", "get_params"], [63, 3, 1, "", "is_multiclass"], [63, 3, 1, "", "is_probabilistic"], [63, 3, 1, "", "learner"], [63, 2, 1, "", "predict"], [63, 2, 1, "", "predict_learner"], [63, 2, 1, "", "set_fit_request"], [63, 2, 1, "", "set_params"]], "mlquantify.methods.aggregative.T50": [[64, 2, 1, "", "best_tprfpr"], [64, 2, 1, "", "delayed_fit"], [64, 2, 1, "", "delayed_predict"], [64, 2, 1, "", "fit"], [64, 2, 1, "", "fit_learner"], [64, 2, 1, "", "get_metadata_routing"], [64, 2, 1, "", "get_params"], [64, 3, 1, "", "is_multiclass"], [64, 3, 1, "", "is_probabilistic"], [64, 3, 1, "", "learner"], [64, 2, 1, "", "predict"], [64, 2, 1, "", "predict_learner"], [64, 2, 1, "", "set_fit_request"], [64, 2, 1, "", "set_params"]], "mlquantify.methods.aggregative.X_method": [[65, 2, 1, "", "best_tprfpr"], [65, 2, 1, "", "delayed_fit"], [65, 2, 1, "", "delayed_predict"], [65, 2, 1, "", "fit"], [65, 2, 1, "", "fit_learner"], [65, 2, 1, "", "get_metadata_routing"], [65, 2, 1, "", "get_params"], [65, 3, 1, "", "is_multiclass"], [65, 3, 1, "", "is_probabilistic"], [65, 3, 1, "", "learner"], [65, 2, 1, "", "predict"], [65, 2, 1, "", "predict_learner"], [65, 2, 1, "", "set_fit_request"], [65, 2, 1, "", "set_params"]], "mlquantify.methods.meta": [[66, 1, 1, "", "Ensemble"]], "mlquantify.methods.meta.Ensemble": [[66, 2, 1, "", "ds_get_posteriors"], [66, 2, 1, "", "ds_selection_metric"], [66, 2, 1, "", "fit"], [66, 2, 1, "", "get_metadata_routing"], [66, 2, 1, "", "get_params"], [66, 2, 1, "", "predict"], [66, 2, 1, "", "ptr_selection_metric"], [66, 2, 1, "", "set_params"], [66, 2, 1, "", "sout"]], "mlquantify.methods.non_aggregative": [[67, 1, 1, "", "HDx"]], "mlquantify.methods.non_aggregative.HDx": [[67, 2, 1, "", "fit"], [67, 2, 1, "", "get_metadata_routing"], [67, 2, 1, "", "get_params"], [67, 2, 1, "", "predict"], [67, 2, 1, "", "set_fit_request"], [67, 2, 1, "", "set_params"]], "mlquantify.model_selection": [[68, 1, 1, "", "GridSearchQ"]], "mlquantify.model_selection.GridSearchQ": [[68, 2, 1, "", "best_model"], [68, 3, 1, "", "classes_"], [68, 2, 1, "", "fit"], [68, 2, 1, "", "get_metadata_routing"], [68, 2, 1, "", "get_params"], [68, 2, 1, "", "predict"], [68, 2, 1, "", "set_params"], [68, 2, 1, "", "sout"]], "mlquantify.utils": [[11, 0, 0, "-", "general"], [12, 0, 0, "-", "method"]], "mlquantify.utils.general": [[70, 4, 1, "", "convert_columns_to_arrays"], [71, 4, 1, "", "generate_artificial_indexes"], [72, 4, 1, "", "generate_artificial_prevalences"], [73, 4, 1, "", "get_measure"], [74, 4, 1, "", "get_method"], [75, 4, 1, "", "get_real_prev"], [76, 4, 1, "", "load_quantifier"], [77, 4, 1, "", "make_prevs"], [78, 4, 1, "", "normalize_prevalence"], [79, 4, 1, "", "parallel"], [80, 4, 1, "", "round_protocol_df"]], "mlquantify.utils.method": [[81, 4, 1, "", "MoSS"], [82, 4, 1, "", "adjust_threshold"], [83, 4, 1, "", "compute_fpr"], [84, 4, 1, "", "compute_table"], [85, 4, 1, "", "compute_tpr"], [86, 4, 1, "", "getHist"], [87, 4, 1, "", "get_scores"], [88, 4, 1, "", "hellinger"], [89, 4, 1, "", "probsymm"], [90, 4, 1, "", "sqEuclidean"], [91, 4, 1, "", "ternary_search"], [92, 4, 1, "", "topsoe"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "terms": {"": [30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 95, 96], "0": [13, 23, 24, 25, 26, 28, 30, 31, 33, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 77, 86, 88, 91, 93, 94, 95, 97, 99, 100, 102], "0001": 91, "0060630241297973545": 68, "008": [47, 48, 57, 58, 64, 65], "00868": [53, 54], "0097": [47, 48, 57, 58, 64, 65], "030": 68, "06": 51, "1": [13, 23, 24, 30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 77, 78, 79, 86, 88, 89, 90, 92, 93, 97, 98, 99, 100, 102], "10": [14, 23, 28, 30, 31, 33, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 87, 93, 94, 95, 100, 102], "100": [23, 25, 26, 28, 44, 46, 66, 68, 93, 94, 95, 102], "1000": [25, 26, 51, 68], "1007": [47, 48, 56, 57, 58, 64, 65, 68], "1109": 59, "11564096_56": 56, "1228": 50, "1233": 50, "14": 51, "146": [55, 67], "15": 66, "1606": [53, 54], "164": [47, 48, 55, 57, 58, 64, 65, 67], "17": [47, 48, 57, 58, 64, 65], "1_6": 68, "1e": [51, 91], "2": [23, 25, 26, 28, 30, 31, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 88, 89, 92, 93, 94, 95, 100, 102], "20": [25, 26, 49, 50, 67], "200": [23, 95, 100], "2001": 52, "2002": [23, 29, 51], "2005": [23, 29, 56, 94, 100], "2008": [23, 47, 48, 57, 58, 64, 65, 94, 100], "2010": [23, 29, 59, 60, 100], "2011": 29, "2013": [23, 55, 61, 67, 94, 96], "2014": 29, "2016": [49, 53, 54, 63], "2017": [66, 93], "2019": [23, 66, 93, 94], "2020": 62, "2021": [23, 50, 68, 94], "206": [47, 48, 57, 58, 64, 65], "21": 51, "218": [55, 67], "25": [30, 58, 66], "2536111111111111": 60, "25584758023226206": 51, "2638888888888889": [48, 51, 52, 53, 54, 60, 61], "27429630811174194": 52, "2777777777777778": [48, 53, 54, 61], "28": 68, "2916666666666667": [48, 53, 61], "29747794914814046": 51, "2ynezgagd0njemkco": 66, "3": [30, 31, 33, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 80, 98], "30": [33, 49, 50, 67], "3049753216939303": 52, "3078703703703704": 54, "3194444444444444": [48, 51, 52, 53, 54, 60, 61], "32": [33, 44, 45, 46, 48, 51, 52, 53, 54, 60, 61, 98], "3333333333333333": 30, "33999999999999997": 55, "34": 66, "3427777777777778": 60, "3606413872681201": 50, "3684210526315789": 67, "3736714619191387": 49, "37719298245614036": [49, 50, 55, 62, 63], "38": 63, "38358048188348526": 62, "39": 67, "3920664352842359": 56, "3968506555196656": 47, "3991228070175439": [47, 56, 57, 58, 59, 64, 65], "3kwhf4aaaaa": 66, "4": [23, 25, 30, 48, 50, 51, 52, 53, 54, 60, 61, 68, 91, 94], "40": 30, "4036111111111111": 60, "40523495782808205": 65, "41": 51, "41287676595138967": [57, 58], "41435185185185186": 54, "4166666666666667": [48, 51, 52, 53, 54, 60, 61], "4182508973311534": 68, "42": [30, 46, 47, 49, 50, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 68], "4207283701943278": 52, "42857142857142855": 30, "4305555555555556": [48, 53, 61], "4376": [49, 63], "43rd": 68, "4466744706195974": 51, "45": 66, "45614035087719296": 66, "4589857954621449": 66, "46": 61, "4664886119311328": 59, "472": 61, "482": 61, "49563196626070505": 64, "4mep7jgfj9wscfmmdq": 61, "5": [24, 30, 31, 46, 47, 50, 57, 59, 64, 97, 99], "50": [23, 28, 44, 64, 66, 93, 94, 100], "500": 68, "504368033739295": 64, "5335113880688672": 59, "5410142045378551": 66, "543859649122807": 66, "564": 56, "5694031": [59, 60], "5714285714285714": 30, "575": 56, "5817491026688466": 68, "5871232340486103": [57, 58], "594765042171918": 65, "6": [30, 53, 54], "6008771929824561": [47, 56, 57, 58, 59, 64, 65], "6031493444803344": 47, "6079335647157641": 56, "61": 67, "6164195181165147": 62, "62": 63, "6228070175438597": [49, 50, 55, 62, 63], "6263285380808613": 49, "631578947368421": 67, "6393586127318799": 50, "66": 55, "6666666666666666": 30, "6789744": 51, "7": 30, "72240": 68, "737": [59, 60], "742": [59, 60], "75": [59, 68], "7th": 62, "8": 30, "87": 66, "9": 30, "91": 68, "9260028": 62, "9679104": 50, "978": 68, "9ssbdm8luf1dm35w88w0ndpvocf1rxbbqtshjyahnpsdd": 66, "A": [13, 30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 81, 84, 86, 87, 97], "And": [97, 99], "As": 47, "But": 46, "For": [1, 30, 31, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 97, 98], "If": [24, 30, 31, 32, 33, 34, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 87, 95, 98], "In": [13, 24, 25, 50, 56, 60, 62, 66, 68, 95, 101, 102], "It": [14, 19, 25, 32, 47, 51, 54, 60, 66, 88, 89, 90, 92, 99], "On": 61, "One": 25, "Or": [23, 100], "The": [13, 14, 19, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102], "These": [23, 31, 93, 94], "To": [19, 26, 61, 95], "With": [45, 46], "_": [14, 46], "__": [31, 32, 33, 66, 67], "__class__": [14, 46], "__init__": [14, 24, 30, 46, 97, 99], "__name__": [14, 46], "_class": 30, "_delayed_fit": 14, "_fit_method": [24, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 97], "_new_sampl": [14, 46], "_predict_method": [24, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 97], "aaai": [49, 63], "ab": [53, 54, 55, 66, 67], "abbrevi": 29, "absolut": [29, 34, 36, 38, 40, 42, 56, 58, 64, 65, 88, 95], "absolute_error": 1, "abstract": [31, 45, 46, 50, 51, 59, 60, 99], "ac": 59, "acc": [1, 23, 56, 57, 58, 59, 64, 65, 100], "access": [23, 94], "accord": 93, "account": 86, "accur": [47, 50, 56, 62, 93], "achiev": 68, "acronym": [29, 95], "across": [1, 19, 25, 36, 37, 38, 39, 40, 42, 43, 49, 50, 55, 57], "activ": 19, "actual": 52, "ad": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "add": 99, "addit": [33, 67, 79, 86], "adjust": [23, 33, 47, 51, 52, 53, 54, 56, 57, 58, 59, 64, 65, 82, 100], "adjust_threshold": [1, 23, 100], "advanc": [62, 68], "advantag": 96, "ae": [29, 44, 68], "after": [51, 66, 68, 95], "aggreg": [1, 15, 21, 25, 26, 28, 30, 31, 33, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 93, 95, 103], "aggregativequantifi": [1, 24, 26, 32, 48, 95, 99], "al": [23, 29, 50, 60, 61, 66, 94, 96, 100], "alaiz": [55, 67], "alegr": [55, 67], "alejandro": 68, "algorithm": [23, 28, 33, 51, 61, 94, 100], "alia": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "align": [47, 52, 65], "all": [13, 14, 23, 25, 26, 30, 31, 32, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 93, 94, 95, 99, 101], "allow": [23, 24, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 94, 97, 98, 99], "along": [23, 100], "alpha": [33, 55, 63, 81], "alpha_train": 50, "alreadi": [19, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 87, 102], "also": [23, 66, 94, 100], "alwai": [24, 49, 50, 55, 62, 63], "an": [14, 15, 23, 28, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 86, 87, 94, 99, 102, 103], "analyt": 62, "andr\u00e9": [50, 62], "ani": [26, 30, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 95, 102], "antonio": 60, "ap8fk5mtpazg": [55, 67], "app": [1, 25, 26, 29, 46, 68, 95, 98], "append": [14, 46, 49, 50], "appli": [23, 53, 66, 91, 94, 98, 101], "applic": [47, 56, 57, 58, 64, 65, 68], "approach": [23, 26, 27, 30, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 94, 101], "approxim": [23, 64, 65, 66, 68, 94], "april": 68, "ar": [14, 19, 23, 24, 25, 29, 30, 31, 32, 33, 34, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 86, 87, 88, 89, 90, 92, 93, 94, 95, 98, 99, 100, 101, 102], "area": 99, "arg": 79, "argument": [25, 26, 33, 79, 91, 102], "arrai": [29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 78, 86, 87, 88, 89, 90, 92, 98, 102], "articl": [47, 48, 49, 55, 57, 58, 61, 63, 64, 65, 66, 67], "artifici": [16, 44, 46, 49, 63, 68, 72, 98, 103], "arument": 26, "arxiv": [53, 54], "ascend": [97, 99], "assertionerror": [44, 46], "assess": [25, 68], "assign": 48, "assum": [23, 47, 87, 89, 92, 94], "assumpt": [23, 27, 63], "attribut": [30, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 95], "australia": 59, "author": 96, "auto": 33, "automat": 19, "avail": [23, 25, 28, 46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 61, 64, 65], "avali": [49, 50, 55, 60, 62, 63, 66, 67], "averag": [52, 59, 95], "avoid": [89, 92], "ax": 53, "aykut": [53, 54], "b": 53, "balanc": [64, 65], "ball_tre": 33, "barranquero": 61, "barraquero": 23, "base": [1, 23, 24, 25, 27, 30, 31, 32, 33, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 93, 94, 95, 97, 99], "base_quantifi": 66, "baseestim": [30, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 98], "baselin": [23, 27], "basic": [23, 25, 27, 30, 32, 93, 99], "batch": [44, 45, 98], "batch_siz": [25, 26, 44, 45, 46, 98], "batista": 62, "becom": 88, "been": [23, 68, 100], "befor": [19, 68], "behavior": 31, "being": [13, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 99], "bella": [23, 29, 59, 60, 100], "below": [19, 23, 28, 94], "berlin": 56, "best": [23, 50, 55, 63, 66, 68, 82, 94, 95], "best_alpha": 55, "best_dist": [23, 49, 50, 55, 94], "best_distance_index": 63, "best_model": [68, 95], "best_param": 68, "best_scor": 68, "best_tprfpr": [47, 56, 57, 58, 64, 65], "better": [61, 68], "between": [23, 35, 36, 38, 39, 40, 42, 43, 49, 50, 55, 56, 58, 62, 63, 64, 65, 67, 77, 86, 88, 89, 90, 92, 93, 94, 96, 98], "billion": 62, "bin": [19, 49, 50, 55, 67, 86], "binari": [20, 23, 24, 30, 31, 32, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 82, 83, 84, 85, 94, 96, 99, 100, 101, 103], "binary_data": 32, "binary_quantifi": 30, "binaryquantifi": 30, "bins_siz": [49, 50, 67], "book": 29, "bool": [30, 31, 32, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 87, 98], "both": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 88, 89, 90, 92], "boundari": [86, 91], "brute": 33, "build": [16, 26, 98, 103], "c": 59, "c3qicg8yu0m4xuz3yv": 66, "calcul": [14, 44, 45, 46, 48, 49, 50, 55, 62, 63, 67, 86], "call": [24, 31, 67, 68, 97], "callabl": 66, "can": [14, 19, 23, 24, 25, 26, 27, 28, 29, 30, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 93, 94, 95, 97, 98, 99, 100, 101], "casa_token": [55, 61, 66, 67], "case": [23, 24, 28, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 95, 102], "castro": [23, 29, 55, 67, 94, 96], "categori": 23, "caus": 88, "cc": [1, 23, 25, 26, 27, 44, 46, 47, 56, 57, 58, 59, 64, 65], "chain": [97, 99], "chang": [30, 31, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 98], "chapter": [56, 68], "characteriz": 66, "check": [30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "choic": [14, 46], "choos": 26, "chosen": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "christin": 51, "class": [1, 13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 74, 75, 78, 82, 84, 93, 94, 95, 96, 97, 99, 100, 101, 102], "class_": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "class_count": 30, "class_distribut": [23, 28], "classes_": 68, "classif": [1, 13, 23, 24, 30, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 83, 84, 85], "classifi": [21, 24, 28, 30, 31, 33, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 96, 100, 102, 103], "classmethod": [51, 53, 54], "closest": [64, 65], "cm": 52, "column": [14, 45, 46, 70, 80, 98], "com": [47, 48, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68], "combin": [23, 31, 67, 68, 93, 94, 95], "command": 19, "common": 102, "compar": [25, 26, 49, 50, 93], "comparison": [23, 27, 98], "compat": [47, 48, 53, 54, 56, 57, 58, 59, 60, 64, 65, 87], "complet": [68, 88], "compon": [31, 32, 33, 66, 67], "comput": [23, 28, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 66, 67, 83, 84, 85, 86, 88, 89, 90, 92, 93, 94, 100, 102], "compute_fpr": [1, 23, 100], "compute_t": [1, 23, 100], "compute_tpr": [1, 23, 100], "concept": [1, 23, 48, 94], "cond_prob_matrix": [53, 54], "condit": [47, 53, 54, 56, 57, 58, 59, 64, 65], "confer": [49, 50, 56, 59, 60, 62, 63, 68], "confid": [52, 54, 59], "configur": [33, 68], "confus": [52, 84], "consid": 49, "consist": [23, 28], "constrain": 53, "construct": [14, 53, 54], "constructor": 14, "conta": 25, "contain": [14, 24, 25, 30, 31, 32, 33, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 81, 84, 86, 95, 97, 98, 99], "context": 13, "control": [33, 50], "converg": 51, "convert": [70, 87], "convert_columns_to_arrai": 1, "copi": 93, "core": 31, "correctli": 14, "correspond": [14, 47, 50, 55, 56, 57, 58, 64, 65, 75, 78, 87], "cost": [47, 48, 57, 58, 64, 65], "count": [21, 47, 48, 52, 53, 54, 56, 57, 58, 59, 60, 64, 65, 68, 86, 100, 103], "count_nonzero": 30, "cover": 102, "coz": 66, "creat": [14, 19, 30, 31, 33, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 95], "creation": 50, "criteria": 93, "criterion": 65, "cross": [23, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 87, 94, 100, 102], "cumul": [23, 94], "current": [96, 102], "curv": 65, "custom": [14, 31], "cv_fold": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "d": [49, 63, 66, 89, 90, 92, 93], "data": [23, 24, 25, 26, 30, 31, 33, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 87, 97, 99, 100], "datafram": [23, 44, 68, 70, 80, 87, 98, 100, 102], "dataset": [13, 23, 30, 33, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 81, 82, 84, 94], "deactiv": 19, "deal": 102, "decaesteck": 51, "decim": 80, "decis": [47, 59, 64, 65], "deep": [30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 95], "def": [14, 24, 30, 31, 46, 97, 99], "default": [30, 31, 32, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 87, 91, 98], "defin": [25, 31, 32, 88, 89, 90, 92, 93, 98, 99], "del": 66, "delai": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "delayed_fit": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "delayed_predict": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "denomin": 56, "depend": [23, 28, 102], "deriv": [33, 53], "describ": 47, "descript": [1, 98], "design": [98, 99], "desir": 91, "despit": 56, "detail": [1, 19, 25, 26, 68, 98], "determin": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "develop": 99, "df": 70, "dict": [30, 31, 32, 33, 34, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 75, 78], "dictionari": [24, 30, 31, 34, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 75, 78, 95, 97, 99], "differ": [13, 19, 23, 25, 31, 51, 56, 58, 64, 65, 88, 93, 94, 98, 100], "dimens": [72, 77], "dimension": 86, "dinam": 24, "directli": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 87, 96, 97, 99], "disabl": 68, "discoveri": [47, 48, 57, 58, 64, 65], "disctionari": [97, 99], "discuss": 68, "displai": 33, "dissimilar": [49, 89, 90], "dist1": [88, 89, 90, 92], "dist2": [88, 89, 90, 92], "dist_test": [49, 50, 55, 62, 63], "dist_train": [49, 50, 55, 62, 63], "distanc": [23, 33, 49, 50, 55, 62, 63, 66, 67, 88, 89, 90, 92, 93, 94, 96], "distribut": [13, 23, 25, 27, 28, 49, 50, 51, 52, 53, 55, 62, 63, 66, 67, 68, 77, 88, 89, 90, 92, 93, 94, 96, 97, 100, 101], "diverg": [29, 35, 39, 92], "divid": 86, "divis": [89, 92], "do": [23, 31, 96], "document": [50, 51, 59, 60, 62], "doe": [32, 46, 47, 56, 57, 58, 63, 64, 65, 97, 102], "doesn": 24, "doi": 59, "domain": 52, "don": [24, 26, 102], "ds_get_posterior": 66, "ds_selection_metr": 66, "dsaa": 62, "dure": [47, 50, 52, 59, 64, 65, 66, 68, 95, 102], "dy": [1, 23, 25, 26, 44, 46, 50, 62, 68, 94, 95], "dynam": [24, 30, 31, 32, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 93, 99], "dyssyn": [1, 23, 94], "e": [13, 23, 24, 25, 26, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 100, 102], "each": [14, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 75, 78, 79, 86, 88, 89, 90, 92, 93, 95, 97, 99, 100, 101, 102], "easi": 98, "easili": [19, 99], "ecir": 68, "effect": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "either": [44, 45], "element": [47, 79, 88, 89, 90, 92], "els": 44, "em": [23, 28, 51], "emerg": 99, "empti": [56, 57, 64, 65], "emq": [1, 23, 25, 26, 28, 44, 46, 102], "enable_metadata_rout": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "encapsul": [30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "end_tim": [14, 46], "enough": 1, "enriqu": [55, 67], "ensembl": [1, 14, 24, 25, 26, 30, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 68, 93, 95, 102], "ensur": [14, 19, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68], "entir": [66, 68], "entri": 54, "entropi": 68, "ep": 91, "epsilon": 51, "equal": [64, 65, 86, 89, 90, 92], "equat": [53, 54, 56], "error": [29, 30, 31, 34, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 88, 95], "estim": [23, 28, 30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 93, 94, 95, 96, 97, 100], "esuli": 29, "et": [23, 29, 50, 60, 61, 66, 94, 96, 100], "euclidean": [33, 49, 50, 55, 62, 63, 90], "european": [56, 68], "evalu": [1, 14, 25, 26, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 55, 66, 68, 73, 87, 95, 103], "event": [68, 88, 89, 90, 92], "everi": [45, 46], "exactli": 77, "exampl": [14, 23, 24, 28, 29, 30, 31, 33, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 94, 95, 97, 98, 99, 100], "exce": [52, 58], "except": 25, "exclud": 95, "execut": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68], "exist": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "expect": [21, 51, 52, 103], "experi": 103, "express": 88, "extend": [59, 61], "extens": [54, 58, 99], "extern": 102, "f": 91, "fabrizio": 68, "factor": 50, "fals": [14, 23, 24, 30, 31, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 82, 83, 84, 85, 87, 98, 100], "fashion": [23, 28], "featur": [30, 31, 32, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 87, 96], "ferri": 59, "field": 25, "file": 76, "final": [66, 101], "find": [23, 28], "firat": [23, 53, 54], "first": [23, 29, 88, 89, 90, 92, 94, 95], "fit": [14, 23, 24, 25, 26, 28, 30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 87, 93, 94, 95, 97, 99, 100, 102], "fit_learn": [24, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "flexibl": 32, "float": [29, 30, 33, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 81, 83, 85, 88, 89, 90, 91, 92, 98], "fm": [1, 23, 66, 93], "fn": [23, 85, 100], "focus": 58, "fold": [23, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 87, 100], "follow": [19, 23, 24, 29, 32, 93, 94, 95, 97, 99, 100], "form": [30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "forman": [23, 29, 47, 48, 56, 57, 58, 64, 65, 94, 100], "format": [25, 45, 46], "found": [14, 47, 68, 95, 98], "fp": [23, 83, 100], "fpr": [23, 47, 56, 57, 58, 59, 64, 65, 100], "frac": 80, "framework": [49, 53, 54, 55, 62], "frequenc": 52, "friedman": [23, 52], "from": [14, 23, 24, 25, 26, 28, 30, 31, 32, 33, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 73, 74, 76, 79, 88, 93, 94, 95, 96, 97, 99, 100, 102], "full": 1, "fulli": 50, "func": 79, "funcion": 13, "function": [1, 14, 23, 24, 32, 33, 49, 61, 66, 73, 79, 86, 87, 91, 94, 95, 99, 100], "further": 1, "fusion": 66, "g": [13, 24, 25, 26, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 95, 102], "gac": [1, 23, 54], "gave": 68, "gener": [1, 14, 16, 23, 26, 30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 87, 93, 94, 98, 100, 102, 103], "generate_artificial_index": 1, "generate_artificial_preval": 1, "georg": [47, 48, 56, 57, 58, 64, 65], "get": [14, 23, 30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 95, 100], "get_cond_prob_matrix": [53, 54], "get_dist": [49, 50, 55, 62, 63], "get_measur": 1, "get_metadata_rout": [30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "get_method": 1, "get_param": [30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 95], "get_real_prev": [1, 14, 30, 33, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "get_scor": [1, 23, 100], "gethist": 1, "getmindistancesdi": 49, "getmindistancesdyssyn": 50, "getmindistanceshdi": 55, "gini": 68, "give": 1, "given": [13, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 86], "glossari": 1, "gonz\u00e1lez": [23, 29, 55, 67, 94, 96], "gpac": [1, 23, 52], "greater": 58, "grid": [66, 68, 95], "gridsearchq": [1, 29, 95], "ground": 102, "group": 23, "guez": [49, 63], "guid": [1, 30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "guidelin": 1, "gustavo": 62, "g\u00e1llego": 66, "g\u00e1llegzo": 93, "h": [49, 63, 88], "ha": [13, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 99], "handl": [24, 31, 88, 99], "hassan": [23, 62, 94], "hasselt": [49, 63], "have": [19, 23, 24, 31, 32, 33, 46, 49, 50, 55, 56, 57, 62, 63, 66, 67, 89, 92, 94, 100, 102], "hdx": [1, 96], "hdy": [1, 23, 49, 67, 94, 96], "heidelberg": 56, "helling": [1, 23, 49, 50, 55, 62, 63, 66, 67, 68, 93, 94, 95], "hern\u00e1ndez": 59, "highli": 50, "histogram": [49, 50, 67, 86, 93], "how": [23, 30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 94], "http": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "hyper": [22, 103], "hyperparamet": [66, 68], "i": [1, 13, 14, 19, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "icdm": [50, 59], "idea": [25, 68, 99], "ident": [88, 89, 90, 92], "identifi": [47, 56, 64, 65], "ieee": [50, 51, 59, 60, 62], "ieeexplor": [50, 51, 59, 60, 62], "ignor": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "ii": 68, "ik7njlecg8skdowldpbj0mwpjykkiqvq": 66, "imbal": 33, "implement": [14, 24, 26, 27, 29, 31, 32, 45, 46, 49, 50, 55, 62, 63, 66, 87, 95, 96, 97, 99], "import": [14, 23, 24, 25, 26, 28, 30, 31, 33, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 93, 94, 95, 97, 99, 100, 102], "improv": 66, "inaccur": 56, "includ": [19, 24, 26, 30, 31, 46, 53, 54, 68, 86, 95, 99], "inclus": 99, "increment": [23, 28], "independ": [31, 67], "index": [14, 46, 49, 56, 63, 64, 65, 71], "indexerror": 47, "indic": [47, 49, 50, 55, 56, 57, 58, 62, 63, 64, 65, 88], "infer": 96, "influenc": [33, 57, 61], "inform": [24, 30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 96], "inher": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "inherit": [14, 26, 30, 32, 95], "initi": [47, 50, 51, 66], "initializ": 46, "input": [23, 33, 34, 41, 49, 50, 55, 62, 63, 66, 68, 87, 88, 89, 90, 92, 93, 100], "insert": 29, "insid": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 88, 95], "instanc": [23, 27, 30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "instanti": [26, 95, 102], "instead": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 96, 99], "instruct": 19, "int": [30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 77, 79, 80, 81, 83, 85, 86, 87, 98], "intellig": [49, 63], "intend": 99, "interest": 99, "interfac": [99, 102], "intern": [41, 50, 59, 60, 62, 68], "interv": 91, "introduc": [23, 94], "invalid": [44, 46], "involv": [13, 48], "ir": 68, "is_multiclass": [24, 30, 32, 47, 49, 50, 55, 56, 57, 58, 62, 63, 64, 65], "is_probabilist": [24, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "iter": [14, 23, 28, 44, 45, 46, 51, 72, 98], "its": [19, 26, 29, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 95], "itself": [30, 32, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "j": [52, 54, 59], "jerryfriedman": 52, "job": [30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 79], "joblib": [19, 66], "jose": 61, "jos\u00e9": 66, "juan": 66, "just": [44, 45], "jwmc592j5umaaaaa": 66, "k": [33, 61, 66, 87], "kd_tree": 33, "kei": [30, 31, 34, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 95, 97, 99], "keyword": 33, "kld": 29, "knn": 33, "knowledg": [47, 48, 57, 58, 64, 65], "known": 63, "kullback": [29, 35, 39], "kullback_leibler_diverg": 1, "label": [14, 23, 24, 25, 26, 30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 75, 78, 82, 84, 87, 97, 99, 100, 102, 103], "last": [23, 28], "latent": [23, 28], "latinn": 51, "latter": [31, 32, 33, 66, 67], "leaf": 33, "leaf_siz": 33, "learn": [1, 19, 29, 30, 44, 45, 46, 47, 48, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 87, 93], "learner": [14, 23, 24, 25, 26, 30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 87, 93, 95, 98, 100, 102], "learner_": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "learner__": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 95], "learner__criterion": 68, "learner__n_estim": [68, 95], "learner_fit": [23, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 87, 100], "least": [14, 30, 53], "left": 91, "leibler": [29, 35, 39], "len": [14, 30, 46], "length": [56, 57, 64, 65, 102], "level": 50, "leverag": [52, 59, 62], "librari": [13, 19, 23, 25, 46, 94, 96, 99, 100], "like": [29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 86, 88, 89, 90, 92, 98, 102], "likelihood": [23, 28], "linear": [53, 54], "linear_model": [23, 28, 94, 100], "linearli": 67, "linha": 26, "link": [47, 48, 56, 57, 58, 64, 65, 68], "linspac": [49, 50], "linux": 19, "list": [23, 25, 26, 29, 30, 44, 45, 46, 49, 50, 53, 54, 55, 68, 70, 71, 77, 78, 79, 95, 98, 102], "literatur": 98, "load": [33, 44, 68, 76], "load_breast_canc": [33, 44, 46, 47, 49, 50, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68], "load_quantifi": 1, "load_win": [48, 51, 52, 53, 54, 60, 61], "log": 92, "logarithm": 92, "logic": [31, 32], "logist": 66, "logisticregress": [23, 28, 94, 100], "long": [46, 95], "loss": 68, "m": [1, 19, 23, 50, 58, 59, 81, 100], "m_i": 93, "machin": [44, 45, 46, 56, 87], "maco": 19, "made": 66, "mae": [25, 26, 29, 68, 95], "mai": [1, 88], "main": [13, 23, 95, 98, 99], "major": 61, "make": [24, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 97, 98, 99], "make_prev": 1, "maletzk": [23, 50, 62, 94], "manag": [19, 103], "manual": [23, 100], "map": [30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "march": 68, "marco": 51, "match": [23, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 94], "matplotlib": 19, "matrix": [51, 52, 53, 54, 66, 84], "max": [1, 23, 57, 100], "max_it": 51, "max_sample_s": 66, "max_trial": 66, "maxim": [56, 82], "maximis": [21, 51, 103], "maximum": [23, 28, 51, 66, 68, 86], "maxq": 56, "mean": [23, 29, 36, 37, 43, 47, 56, 57, 58, 60, 62, 64, 65, 66, 68, 93, 94, 101], "mean_absolute_error": [1, 29, 95], "mean_squared_error": 1, "measur": [1, 14, 23, 25, 26, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 55, 62, 63, 66, 68, 73, 88, 89, 90, 92, 94, 95, 96, 98], "mechan": [30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "median": [23, 57, 58, 66, 93, 100], "meet": 58, "member": 62, "merg": 50, "merge_factor": 50, "messag": [44, 45, 46, 66, 68], "meta": [1, 21, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 103], "metadata": [30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "metadata_rout": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "metadatarequest": [30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "method": [1, 13, 14, 24, 25, 26, 27, 28, 30, 31, 32, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 74, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103], "metric": [22, 33, 49, 50, 55, 57, 62, 63, 66, 68, 95, 103], "metric_param": 33, "mid": [23, 24, 97, 102], "min_prop": 66, "mine": [47, 48, 50, 57, 58, 59, 60, 64, 65], "minim": [23, 49, 55, 63, 64, 65, 67, 68, 91, 94], "minimum": [49, 50, 55, 66], "minkowski": 33, "misalign": [64, 65], "mismatch": [49, 50, 55, 56, 57, 62, 63], "mitig": 57, "mix": 50, "mixtur": [21, 55, 103], "mixture_model": [49, 50, 55, 62, 63], "mixturemodel": [49, 50, 55, 62, 63], "mlquantifi": [1, 14, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 102], "mlquantify_env": 19, "model": [14, 21, 25, 26, 28, 30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 87, 93, 95, 98, 100, 102, 103], "model_select": [1, 30, 33, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 95], "modul": [14, 23, 29, 73, 74, 94], "more": [23, 24, 25, 26, 30, 32, 47, 93, 94, 98, 99], "moreo": 68, "moss": [1, 50], "most": [23, 27, 66, 100, 101], "ms2": [1, 23, 100], "mse": [29, 37], "msg": [44, 45, 46, 66, 68], "multiclass": [13, 20, 23, 30, 31, 32, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 99, 100, 103], "multipl": [24, 66], "must": [14, 24, 25, 26, 33, 44, 45, 46, 61, 88, 89, 90, 92, 97, 99, 102], "mutual": [23, 28], "myaggregativequantifi": 24, "mynonaggregativequantifi": [31, 97], "myprotocol": [14, 46], "myquantifi": [26, 30, 31, 99], "n": [44, 45, 50, 51, 61, 72, 81], "n_class": [32, 35, 36, 37, 38, 39, 40, 42, 43, 66, 98, 102], "n_dim": [72, 77], "n_featur": [33, 50, 66, 68], "n_iter": [44, 45, 72], "n_job": [14, 30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 79, 93, 98], "n_neighbor": 33, "n_prev": [25, 26, 44, 68, 72], "n_repetit": 68, "n_sampl": [33, 50, 66, 68, 102], "n_samples_test": 102, "nae": [29, 68, 95], "name": [14, 25, 29, 30, 31, 32, 33, 34, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 95, 98], "natur": [44, 45, 46, 68, 92, 98], "nbin": 86, "ndarrai": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 71, 72, 75, 78, 82, 84, 86, 87], "ndim": 77, "nearest": [23, 33, 61], "necessari": [32, 66], "need": [14, 24, 26, 95, 102], "neg": [47, 55, 62, 63, 67, 81, 83, 84, 85, 88, 89, 90, 92, 101], "neg_featur": 67, "neg_scor": [55, 62, 63], "neighbor": [23, 33, 61], "nest": [31, 32, 33, 66, 67], "neural": 51, "new": [14, 24, 51, 66, 97, 99, 102], "nkld": 29, "nn": 61, "non": [15, 21, 24, 25, 26, 31, 88, 89, 90, 92, 103], "non_aggreg": [1, 67], "nonaggregativequantifi": [1, 26, 32, 67, 95, 97, 99], "none": [24, 30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 98], "normal": [29, 30, 31, 38, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 78, 86, 101], "normalize_preval": 1, "normalized_absolute_error": 1, "normalized_kullback_leibler_diverg": 1, "normalized_relative_absolute_error": 1, "note": [14, 23, 30, 31, 32, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 86, 87, 88, 89, 90, 92], "noth": 24, "now": 19, "np": [14, 23, 25, 26, 28, 30, 31, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 67, 71, 72, 75, 78, 82, 84, 86, 87, 93, 94, 95, 100, 102], "npp": [1, 44, 46, 68, 98], "nrae": 29, "nsw": 59, "number": [13, 23, 27, 30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 77, 79, 80, 81, 83, 85, 86, 87, 98, 99], "numer": 88, "numpi": [14, 19, 23, 25, 26, 28, 30, 31, 46, 66, 70, 93, 94, 95, 100, 102], "object": [1, 30, 31, 32, 33, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 87, 98, 99], "obtain": [23, 59, 66, 94, 100, 101], "oj": [49, 63], "one": [24, 25, 26, 30, 31, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 93, 101], "ones": 26, "onli": [13, 14, 25, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 89, 90, 92, 93, 96, 97, 101], "oper": 19, "oppos": 67, "optim": [52, 56, 57, 58, 61, 66, 68, 91], "optin": 102, "option": [14, 25, 30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 87, 91], "orallo": 59, "order": [97, 99], "ordin": [23, 63, 94], "org": [49, 50, 51, 53, 54, 59, 60, 62, 63], "orient": 68, "origin": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "other": [14, 24, 26, 27, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 93, 101], "otherwis": [14, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "our": [23, 28], "out": [30, 99], "outlier": 57, "output": [23, 47, 51, 100], "over": [51, 68, 95], "own": [14, 23, 26, 46, 98, 99, 100], "oxnricdhzqqa1c8bcjm5pbnfrd26p8": 66, "p": [33, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 88, 89, 90, 92], "p_metric": 66, "pablo": 66, "pac": 54, "pacc": [1, 23, 100], "packag": 2, "panda": [19, 23, 44, 68, 87, 98, 100, 102], "parallel": [1, 30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "param": [30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 95], "param1": [24, 97, 99], "param2": [24, 97, 99], "param_grid": [68, 95], "paramet": [14, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 103], "parameter_grid": 95, "part": 68, "particularli": [51, 64], "pass": [14, 25, 26, 29, 30, 31, 33, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 79, 95, 102], "path": 76, "patric": 51, "pattern": 61, "pcc": [1, 23], "pd": [23, 70, 75, 80, 87, 100], "pdf": 52, "per": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "perform": [22, 23, 25, 26, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 87, 94, 95, 98, 103], "php": [49, 63], "pii": [55, 61, 66, 67], "pip": 19, "pipelin": [30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "place": 80, "pleas": [1, 30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "point": [14, 44, 64, 65, 66, 68], "pos_featur": 67, "pos_scor": [55, 62, 63], "posit": [23, 30, 47, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 81, 82, 83, 84, 85, 100, 101], "possibl": [13, 31, 32, 33, 66, 67, 95], "posterior": [23, 28, 51, 66, 93], "posteriors_gener": 66, "posteriors_test": [69, 102], "posteriors_train": [69, 102], "power": 33, "pp": [59, 68], "pre": 87, "precis": 91, "pred": [30, 98, 102], "pred_prev": [14, 46, 70, 98], "predict": [14, 23, 24, 25, 26, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 82, 84, 87, 93, 96, 97, 98, 99, 100, 102], "predict_learn": [24, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "predict_proba": [23, 24, 28, 49, 50, 51, 55, 62, 63, 87, 102], "predict_protocol": [14, 44, 45, 46], "predicted_label": 30, "predicted_preval": 53, "prefix": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 95], "preprint": [53, 54], "present": [19, 52], "prev": [44, 49], "prev_pr": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "prev_real": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "preval": [14, 16, 23, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 75, 78, 93, 98, 103], "print": [23, 25, 26, 28, 33, 44, 45, 46, 51, 66, 68, 93, 94, 100, 102], "prior": [51, 52], "priori": 51, "probabiblit": [23, 28], "probabilist": [23, 24, 28, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 89, 100], "probabl": [23, 28, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 82, 86, 87, 88, 89, 90, 92, 100, 102], "problem": [20, 23, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 99, 100, 102, 103], "probsymm": [1, 23, 49, 50, 55, 62, 63, 94], "procedur": 51, "proceed": [49, 63, 68], "process": [23, 31, 41, 44, 45, 47, 59, 66, 67, 93, 94], "process_input": 1, "processor": 68, "produc": 93, "progress": [44, 45, 46, 66, 68], "project": 19, "properti": [24, 30, 32, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68], "proport": [24, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 81, 86, 97, 99], "propos": [23, 29, 93, 96, 100], "protocol": [1, 16, 44, 45, 68, 80, 103], "provid": [13, 24, 30, 31, 32, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 93, 98, 99], "ptr": [66, 93], "ptr_selection_metr": 66, "publish": 68, "pwk": [1, 23, 33], "pwkclf": [1, 61], "python": [2, 19, 66, 102], "python3": 19, "p\u00e9rez": [66, 93], "p\u1d62": [88, 89, 90, 92], "q": [88, 89, 90, 92], "qc": 52, "qginkrzdehgaaaaa": 61, "quantif": [2, 21, 22, 25, 27, 31, 44, 45, 46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 64, 65, 66, 68, 82, 94, 99, 103], "quantifi": [1, 13, 14, 22, 25, 26, 28, 30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 93, 94, 96, 98, 100, 102, 103], "quevedo": 66, "quintana": 59, "q\u1d62": [88, 89, 90, 92], "rae": 29, "rais": [30, 31, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68], "ram\u00edrez": 59, "ram\u00f3n": 66, "rand": [23, 25, 26, 28, 31, 93, 94, 95, 100, 102], "randint": [23, 25, 26, 28, 93, 94, 95, 100, 102], "random": [14, 23, 25, 26, 28, 31, 44, 45, 46, 53, 54, 68, 93, 94, 95, 100, 102], "random_se": 68, "random_st": [14, 30, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 98], "randomforestclassifi": [14, 24, 25, 26, 30, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 66, 68, 93, 95, 102], "rang": [14, 46, 50, 86, 88], "rank": 93, "rate": [23, 47, 56, 57, 58, 59, 64, 65, 82, 83, 85, 100], "rather": 68, "raw": 1, "re": 68, "reach": 51, "read": [30, 32], "readi": 19, "real": [14, 30, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 75, 98], "real_prev": [14, 46, 70, 98], "reasearch": 102, "recal": 85, "receiv": 14, "recognit": 61, "recommend": [19, 24, 32, 97, 99, 102], "recurs": [23, 28], "reduc": 61, "refer": [23, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 94, 100], "refit": 68, "regress": [53, 66], "rel": [29, 40, 42], "relative_absolute_error": 1, "relev": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "reli": [59, 63, 96], "remak": 102, "repeat": 1, "repetit": 68, "replac": [14, 23, 46, 100], "repres": [53, 54, 62, 64, 66, 88, 89, 90, 92], "reproduc": [53, 54, 68], "request": [30, 31, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "requir": [14, 31, 44, 45, 46], "research": [68, 99], "respect": [24, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 95, 97], "respons": 14, "rest": 14, "result": [23, 24, 25, 26, 30, 31, 33, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 79, 91, 98, 101], "retain": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "retriev": [56, 68], "return": [14, 23, 24, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100], "return_typ": [14, 25, 26, 44, 45, 46, 66, 93], "return_x_i": [33, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "right": 91, "robust": 25, "roc": [64, 65], "roc\u00edo": [55, 67], "rodr\u00edguez": [55, 67], "root": 88, "round": 80, "round_protocol_df": 1, "rout": [30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "row": 102, "run": [30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 79, 93], "runtimeerror": 68, "s0020025512004069": [55, 67], "s0031320312003391": 61, "s10618": [47, 48, 57, 58, 64, 65], "s1566253516300628": 66, "s1566253517303652": 66, "s8k2ygfrvgdibydgwjei70uej546cop9f": [55, 67], "s_i": 93, "saeren": [23, 29, 51], "same": [25, 45, 46, 47, 96, 102], "sampl": [14, 23, 30, 33, 44, 45, 50, 62, 63, 66, 68, 71, 81, 93, 94], "sample_s": [14, 46, 71], "satisfi": 58, "save": 32, "save_quantifi": 32, "scenario": [24, 25, 51, 66, 103], "scheme": [24, 61, 103], "scienc": [55, 61, 62, 66, 67], "sciencedirect": [55, 61, 66, 67], "scikit": [1, 19, 30, 47, 48, 53, 54, 56, 57, 58, 59, 60, 64, 65], "score": [22, 23, 28, 49, 50, 52, 54, 55, 62, 63, 67, 68, 86, 94, 95, 103], "script": 19, "se": [29, 44], "search": [33, 66, 68, 91, 95], "sebastiani": [29, 68], "second": [62, 68, 88, 89, 90, 92], "section": [14, 98], "see": [1, 24, 25, 26, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 98], "seed": [44, 45, 46, 53, 54, 68], "seen": 93, "select": [16, 49, 50, 56, 58, 64, 65, 66, 95, 98, 101, 103], "selection_metr": [66, 93], "selet": 66, "self": [14, 24, 30, 31, 32, 33, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 97, 99], "send": 99, "sensit": 64, "separ": [23, 50, 66, 101], "seri": [75, 87, 102], "serv": 48, "set": [23, 25, 26, 27, 30, 31, 32, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 86, 93, 94, 95, 96, 97, 98, 99, 100, 102], "set_argu": [1, 102], "set_config": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "set_fit_request": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "set_param": [30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 95], "set_paramet": 102, "set_predict_proba_request": 51, "sever": [44, 45, 93], "shape": [33, 35, 36, 37, 38, 39, 40, 42, 43, 50, 66, 68, 81, 102], "should": [14, 29, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 88, 89, 90, 92, 95, 97, 99], "shown": 29, "silver": [49, 63], "similar": [13, 14, 23, 26, 27, 49, 50, 52, 54, 66, 88, 93, 94, 96], "similarli": 50, "simpl": [23, 27, 31, 32, 33, 51, 62, 66, 67], "simplest": 48, "simul": 25, "sinc": 99, "singl": [44, 45, 46, 68], "size": [14, 23, 25, 26, 28, 33, 44, 45, 46, 49, 50, 55, 62, 63, 66, 67, 93, 94, 98, 100], "sklearn": [14, 23, 24, 25, 26, 28, 30, 31, 33, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 93, 94, 95, 100, 102], "slightli": 88, "smm": [1, 23, 94], "so": [31, 32, 33, 47, 56, 57, 58, 64, 65, 66, 67, 99], "sole": 59, "solut": 102, "solv": [52, 53, 54], "solve_adjust": 53, "some": [13, 23, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 94], "sord": [1, 23, 94], "sort": [97, 99], "sourc": [19, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "sout": [44, 45, 46, 66, 68], "space": [64, 67, 86], "specif": [1, 14, 26, 31, 64], "specifi": [30, 46, 47, 49, 50, 55, 62, 63, 70, 80, 95], "spectrum": 50, "split": [30, 33, 44, 45, 53, 54, 68], "springer": [47, 48, 56, 57, 58, 64, 65, 68], "sqeuclidean": [1, 23, 94], "sqrt": 88, "squar": [29, 37, 43, 53, 88, 90], "squared_error": 1, "stabl": 47, "standard": [68, 98], "start_tim": [14, 46], "step": [23, 28], "still": [99, 101, 102], "store": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "str": [30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 76, 98], "strategi": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "stratifi": [71, 87], "string": [25, 68, 70], "structur": [23, 30, 31, 32, 94], "studi": [61, 66], "su": 52, "sub": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "subclass": [24, 31, 97, 99], "subobject": [30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 95], "sum": [77, 78, 88, 89, 90, 92, 97, 99, 102], "super": [14, 46], "supervis": [55, 62, 63], "support": [31, 47, 49, 50, 55, 56, 57, 58, 62, 63, 64, 65, 68], "svc": [30, 47, 56, 57, 58, 59, 64, 65], "svm": [30, 47, 56, 57, 58, 59, 64, 65], "sweep": [23, 57, 58, 100], "sydnei": 59, "symmetr": 89, "synthet": [23, 50, 81, 94], "system": [19, 53, 54], "t": [14, 24, 26, 46, 102], "t50": [1, 23, 100], "tabl": [23, 25, 26, 44, 45, 46, 84, 100], "take": [23, 57, 66, 93, 96, 100], "talk": 52, "target": [13, 33, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 75, 87], "task": [23, 24, 64, 66, 82, 83, 84, 85, 97, 102], "taxonomi": 103, "ternari": 91, "ternary_search": 1, "test": [23, 24, 25, 26, 27, 30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 93, 94, 96, 97, 99, 100, 102], "test_scor": [49, 50, 55], "test_siz": [30, 33, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "th": [47, 88, 89, 90, 92], "than": [58, 68], "thei": [19, 30, 31, 32, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 88, 95, 96, 98], "them": [23, 50, 93, 94, 98, 99, 101], "thi": [1, 13, 14, 23, 24, 25, 26, 29, 30, 31, 32, 33, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102], "third": 30, "those": 95, "threshold": [21, 47, 51, 56, 57, 58, 59, 64, 65, 82, 103], "thresholdoptim": [47, 56, 57, 58, 59, 64, 65], "through": [23, 66, 94, 102], "time": [14, 46, 68, 93, 99], "time_elaps": 14, "timeout": 68, "tn": [23, 83, 100], "togeth": 44, "tool": 13, "topso": [1, 23, 49, 50, 55, 62, 63, 68, 94, 95], "tops\u00f8": 92, "total": 86, "tp": [23, 85, 100], "tpr": [23, 47, 56, 57, 58, 59, 64, 65, 100], "tqdm": 19, "train": [23, 24, 25, 26, 27, 30, 31, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 87, 93, 94, 96, 97, 99, 102], "train_siz": [53, 54], "train_test_split": [30, 33, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "treat": 101, "tree": 33, "tri": 97, "trial": 66, "true": [23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 82, 83, 84, 85, 87, 93, 95, 100], "truth": 102, "try": 68, "tun": [22, 103], "tune": [68, 95], "tupl": [14, 44, 45, 46, 47, 50, 51, 55, 56, 57, 58, 64, 65, 79, 81, 82, 84, 87], "two": [13, 23, 24, 49, 50, 55, 62, 63, 88, 89, 90, 92, 94, 98], "type": [23, 29, 30, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 98], "typic": [47, 56, 57, 58, 64, 65], "u": [93, 99], "unbias": 66, "unchang": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "under": 50, "underli": 31, "unifi": [53, 54], "uniformli": 77, "union": [44, 45, 46, 68, 87, 98], "uniqu": [23, 71, 78, 82, 84, 100], "unknown": [23, 94], "unlabel": 62, "unless": 25, "unobserv": [23, 28], "until": 51, "updat": [23, 28, 30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "upper": 86, "us": [1, 14, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 81, 87, 88, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102], "usag": [13, 16, 24, 93, 97, 98, 99, 102, 103], "user": [1, 26, 30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "util": [1, 14, 23, 30, 31, 33, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 100], "v": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 101], "val_split": 68, "valid": [23, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 87, 88, 89, 90, 92, 94, 100, 102], "valu": [13, 23, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 77, 88, 91, 95, 96, 97, 98, 99, 100], "valueerror": [49, 50, 55, 56, 57, 58, 62, 63, 64, 65, 68], "van": [49, 63], "vari": [25, 44, 45, 66, 93], "variabl": [13, 23, 28, 50, 57], "variou": 50, "vector": [49, 50, 55, 62, 63, 66], "venv": 19, "verbos": [14, 25, 26, 44, 45, 46, 66, 68, 93, 95, 98], "version": [30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "via": [19, 23, 47, 48, 50, 52, 53, 57, 58, 59, 60, 64, 65, 66, 94, 100, 102], "view": [49, 63], "virtual": 68, "vnacke5w_gsav0bwqiwzt2qoauljp": [55, 67], "v\u00edctor": [55, 67], "w6uksoigmp4aaaaa": [55, 67], "wa": [23, 68, 94], "wai": [23, 24, 25, 26, 93, 97, 98, 99, 100], "want": [24, 25, 26, 32, 98, 102], "waqar": 62, "warn": [32, 58], "weight": [33, 61], "well": [31, 32, 33, 66, 67, 95], "were": [98, 101], "when": [24, 25, 26, 29, 87, 95, 97, 102], "where": [13, 14, 24, 26, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 88, 89, 90, 92, 97], "whether": [30, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "which": [23, 27, 30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 93, 94, 95, 97, 99], "while": [97, 99], "whose": 66, "wich": 30, "wide": 25, "window": 19, "without": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 87], "work": [13, 14, 23, 30, 31, 32, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 100, 101], "www": [55, 61, 66, 67], "x": [14, 23, 24, 30, 31, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 87, 97, 99, 100], "x_method": [1, 23, 100], "x_sampl": [14, 46], "x_test": [14, 23, 25, 26, 28, 30, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 93, 94, 102], "x_train": [14, 23, 25, 26, 28, 30, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 93, 94, 95, 102], "xblh": 66, "xlrd": 19, "y": [14, 23, 24, 30, 31, 33, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 75, 82, 84, 87, 94, 97, 99, 100], "y_label": [23, 53, 54, 69, 100, 102], "y_pred": [23, 24, 33, 47, 48, 52, 53, 54, 56, 57, 58, 59, 60, 61, 64, 65, 69, 84, 100, 102], "y_pred_train": [69, 102], "y_sampl": [14, 46], "y_test": [14, 25, 26, 30, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 93, 102], "y_train": [14, 23, 25, 26, 28, 30, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 93, 94, 95, 102], "ybr7ak": 66, "ye": 13, "yet": [23, 68, 100], "yi": [53, 54], "yj": [53, 54], "you": [14, 19, 23, 24, 25, 26, 30, 31, 32, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 94, 95, 97, 98, 99, 100, 102], "your": [14, 19, 23, 24, 26, 46, 98, 99, 100], "yu_ttk6tso0xazr23i0egnge_uma_kwi1eb8kxarz5vg1pflpmwcbewnvz5": 61, "zero": [49, 50, 55, 58, 62, 63, 89, 90, 92], "\u00b2": [89, 90], "\u03c3": [88, 89, 90, 92]}, "titles": ["&lt;no title&gt;", "API Reference", "mlquantify", "mlquantify.base", "mlquantify.classification.methods", "mlquantify.evaluation.measures", "mlquantify.evaluation.protocol", "mlquantify.methods.aggregative", "mlquantify.methods.meta", "mlquantify.methods.non_aggregative", "mlquantify.model_selection", "mlquantify.utils.general", "mlquantify.utils.method", "<span class=\"section-number\">2.1. </span>Binary problems", "<span class=\"section-number\">6.4. </span>Building a Protocol", "<span class=\"section-number\">3. </span>Building a Quantifier", "<span class=\"section-number\">6. </span>Experiment Management", "&lt;no title&gt;", "Index", "Installing mlquantify", "<span class=\"section-number\">2. </span>Label Scheme", "<span class=\"section-number\">1. </span>Methods Taxonomy", "<span class=\"section-number\">5. </span>Model Selection and Evaluation", "<span class=\"section-number\">1.1. </span>Aggregative Quantification", "<span class=\"section-number\">3.2. </span>Building an Aggregative Quantifier", "<span class=\"section-number\">6.2. </span>Artificial Prevalence protocol with general usage", "<span class=\"section-number\">6.3. </span>Artificial Prevalence protocol with selected usage", "Classify Count", "Expectation Maximisation for Quantification", "<span class=\"section-number\">5.2. </span>Metrics and scoring: quantifing the performance of a quantifier", "AggregativeQuantifier", "NonAggregativeQuantifier", "Quantifier", "PWKCLF", "absolute_error", "kullback_leibler_divergence", "mean_absolute_error", "mean_squared_error", "normalized_absolute_error", "normalized_kullback_leibler_divergence", "normalized_relative_absolute_error", "process_inputs", "relative_absolute_error", "squared_error", "APP", "NPP", "Protocol", "ACC", "CC", "DyS", "DySsyn", "EMQ", "FM", "GAC", "GPAC", "HDy", "MAX", "MS", "MS2", "PACC", "PCC", "PWK", "SMM", "SORD", "T50", "X_method", "Ensemble", "HDx", "GridSearchQ", "set_arguments", "convert_columns_to_arrays", "generate_artificial_indexes", "generate_artificial_prevalences", "get_measure", "get_method", "get_real_prev", "load_quantifier", "make_prevs", "normalize_prevalence", "parallel", "round_protocol_df", "MoSS", "adjust_threshold", "compute_fpr", "compute_table", "compute_tpr", "getHist", "get_scores", "hellinger", "probsymm", "sqEuclidean", "ternary_search", "topsoe", "<span class=\"section-number\">1.3. </span>Meta Quantification", "Mixture Models", "<span class=\"section-number\">5.1. </span>Tunning the hyper-parameter of a quantifier", "<span class=\"section-number\">1.2. </span>Non Aggregative Quantification", "<span class=\"section-number\">3.3. </span>Building a Non-Aggregative Quantifier", "<span class=\"section-number\">6.1. </span>Protocol", "<span class=\"section-number\">3.1. </span>Building a Quantifier", "Threshold Methods", "<span class=\"section-number\">2.2. </span>Multiclass Problems", "<span class=\"section-number\">4. </span>Non Parameters Scenarios", "User Guide"], "titleterms": {"absolute_error": 34, "acc": 47, "adjust_threshold": 82, "aggreg": [7, 9, 23, 24, 96, 97], "aggregativequantifi": 30, "an": 24, "ani": 98, "api": 1, "app": 44, "artifici": [25, 26], "base": [3, 98], "binari": 13, "build": [14, 15, 24, 97, 99], "cc": 48, "classif": 4, "classifi": [23, 27], "compute_fpr": 83, "compute_t": 84, "compute_tpr": 85, "convert_columns_to_arrai": 70, "count": [23, 27], "depend": 19, "dy": 49, "dyssyn": 50, "emq": 51, "ensembl": 66, "environ": 19, "evalu": [5, 6, 22, 98], "expect": [23, 28], "experi": 16, "fm": 52, "gac": 53, "gener": [11, 25], "generate_artificial_index": 71, "generate_artificial_preval": 72, "get_measur": 73, "get_method": 74, "get_real_prev": 75, "get_scor": 87, "gethist": 86, "gpac": 54, "gridsearchq": 68, "guid": 103, "hdx": 67, "hdy": 55, "helling": 88, "hyper": 95, "implement": [23, 94, 100], "instal": 19, "kullback_leibler_diverg": 35, "label": 20, "load_quantifi": 76, "m": 57, "make_prev": 77, "manag": 16, "max": 56, "maximis": [23, 28], "mean_absolute_error": 36, "mean_squared_error": 37, "measur": 5, "meta": [8, 93], "method": [4, 7, 8, 9, 12, 21, 23, 100], "metric": 29, "mixtur": [23, 94], "mlquantifi": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19], "model": [22, 23, 94], "model_select": 10, "moss": 81, "ms2": 58, "multiclass": 101, "non": [9, 96, 97, 102], "non_aggreg": 9, "nonaggregativequantifi": 31, "normalize_preval": 78, "normalized_absolute_error": 38, "normalized_kullback_leibler_diverg": 39, "normalized_relative_absolute_error": 40, "npp": 45, "other": 23, "output": 98, "pacc": 59, "parallel": 79, "paramet": [95, 98, 102], "pcc": 60, "perform": 29, "preval": [25, 26], "problem": [13, 101], "probsymm": 89, "process_input": 41, "protocol": [6, 14, 25, 26, 46, 98], "pwk": 61, "pwkclf": 33, "quantif": [23, 28, 29, 93, 96], "quantifi": [15, 23, 24, 29, 32, 95, 97, 99], "refer": 1, "relative_absolute_error": 42, "return": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "return_typ": 98, "round_protocol_df": 80, "scenario": 102, "scheme": 20, "score": 29, "select": [22, 26], "set_argu": 69, "smm": 62, "sord": 63, "sqeuclidean": 90, "squared_error": 43, "t50": 64, "tabl": 98, "taxonomi": 21, "ternary_search": 91, "threshold": [23, 100], "topso": 92, "tun": 95, "us": 19, "usag": [25, 26], "user": 103, "util": [11, 12], "virtual": 19, "x_method": 65}})